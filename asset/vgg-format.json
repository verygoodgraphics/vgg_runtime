{
  "title": "VGG Vector Graphics Specification",
  "description": "VGG Vector Graphics Specification is a JSON-based spec for describing vector graphics.\n\nIn the coordinate system defined by VGG, the X-axis increases to the right, and the Y-axis increases upwards. For a given coordinate point:\n- If it is specified as normalized coordinates, it is normalized relative to the width and height in the `bounds`.\n- Otherwise, the point is non-normalized and in the same coordinate system as the object `bounds`.",
  "type": "object",
  "$id": "https://docs.verygoodgraphics.com/schemas/vectorgraphics.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Frame": {
      "title": "Frame",
      "description": "A frame is an object that can be rendered and a container that holds objects.\nIn contrast to a group, a group is not an object but rather a collection of objects.\nFor example:\n  The frame's fills affect itself.\n  The group's fills affect all of its children.",
      "$id": "#Frame",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "A list of all child objects.\n**Note:** The child object that appears later in the list will be displayed above the one that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "type": "string",
          "const": "frame"
        },
        "radius": {
          "type": "array",
          "description": "The radius values correspond to the corners in the following order: left-top, right-top, right-bottom, left-bottom.\nDefault value is `[0, 0, 0, 0]`.",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        },
        "backgroundColor": {
          "$ref": "#/definitions/Color",
          "description": "The background color of the canvas on which the frame is positioned. Exists only on the top-level frame."
        },
        "frameType": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "normal frame.(Default value)",
            " virtual frame.  In many design software, each page may have elements that are floating outside the top-level frame(artboard).  Organizing these elements into a new top-level frame would create a virtual frame. ",
            " container of symbol master variants. In Figma, when creating multiple variants of a symbol master, it automatically creates a frame to contain them. "
          ]
        }
      },
      "additionalProperties": false
    },
    "GraphicsContextSettings": {
      "title": "Graphics Context Settings",
      "description": "Define the opacity, blend mode, isolation blending, and transparency knockout group of the object.",
      "type": "object",
      "$id": "#GraphicsContextSettings",
      "required": [
        "class",
        "blendMode",
        "opacity",
        "isolateBlending",
        "transparencyKnockoutGroup"
      ],
      "properties": {
        "class": {
          "type": "string",
          "const": "graphicsContextSettings"
        },
        "blendMode": {
          "$ref": "#/definitions/BlendMode",
          "description": "The blend mode of the object."
        },
        "opacity": {
          "$ref": "#/definitions/UnitInterval",
          "description": "The opacity of the object. `0` represents transparent, and `1` represents opaque."
        },
        "isolateBlending": {
          "type": "boolean",
          "description": "To leave objects beneath unaffected, you can isolate the blending mode to a targeted layer or group."
        },
        "transparencyKnockoutGroup": {
          "type": "integer",
          "description": "In a transparency knockout group, the elements of a group don't show through each other.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["OFF", "ON", "Neutral"]
        }
      },
      "additionalProperties": false
    },
    "BlendMode": {
      "title": "Blend Mode",
      "description": "Blend mode of the object.\nIn the formula below:\n  `r` means result.\n  `s` means source.\n  `d` means destination.\n  `sa` means source alpha.\n  `da` means destination alpha.\n  `rc` means result RGB.\n  `ra` means result alpha.",
      "type": "integer",
      "enum": [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27
      ],
      "enumDescriptions": [
        "normal: r = s + (1 - sa) * d",
        "darken: rc = s + d - max(s * da, d * sa), ra = normal",
        "multiply: r = s * (1 - da) + d * (1 - sa) + s * d",
        "color burn: darken destination to reflect source",
        "lighten: rc = s + d - min(s * da, d * sa), ra = normal",
        "screen: r = s + d - s * d",
        "color dodge: brighten destination to reflect source",
        "overlay: multiply or screen, depending on destination",
        "soft light: lighten or darken, depending on source",
        "hard light: multiply or screen, depending on source",
        "difference: rc = s + d - 2 * (min(s * da, d * sa)), ra = normal",
        "exclusion: rc = s + d - two(s * d), ra = normal",
        "hue: hue of source with saturation and luminosity of destination",
        "saturation: saturation of source with hue and luminosity of destination",
        "color: hue and saturation of source with luminosity of destination",
        "luminosity: luminosity of source with hue and saturation of destination",
        "plus darker",
        "plus lighter",
        "pass through: ignore current layer"
      ],
      "$id": "#BlendMode"
    },
    "UnitInterval": {
      "title": "Unit Interval",
      "description": "Encode normalized scalar values, such as RGB color components.",
      "type": "number",
      "minimum": 0,
      "maximum": 1,
      "$id": "#UnitInterval"
    },
    "Style": {
      "title": "Style",
      "description": "Define an object style.",
      "type": "object",
      "$id": "#Style",
      "required": ["class", "borders", "fills", "blurs", "shadows"],
      "properties": {
        "class": {
          "type": "string",
          "const": "style"
        },
        "borders": {
          "type": "array",
          "description": "A list of the border styles of the object.",
          "items": {
            "$ref": "#/definitions/Border"
          }
        },
        "fills": {
          "type": "array",
          "description": "A list of the fill styles of the object.",
          "items": {
            "$ref": "#/definitions/Fill"
          }
        },
        "blurs": {
          "type": "array",
          "description": "A list of the blur styles of the object.",
          "items": {
            "$ref": "#/definitions/Blur"
          }
        },
        "shadows": {
          "type": "array",
          "description": "A list of the shadow styles of the object.",
          "items": {
            "$ref": "#/definitions/Shadow"
          }
        }
      },
      "additionalProperties": false
    },
    "Border": {
      "title": "Border",
      "description": "Define a border style of an object.",
      "type": "object",
      "$id": "#Border",
      "required": [
        "class",
        "isEnabled",
        "fillType",
        "position",
        "thickness",
        "contextSettings",
        "style",
        "dashedPattern",
        "dashedOffset",
        "lineCapStyle",
        "lineJoinStyle",
        "miterLimit",
        "flat"
      ],
      "properties": {
        "class": {
          "type": "string",
          "const": "border"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "The color of the border's fill."
        },
        "fillType": {
          "$ref": "#/definitions/FillType",
          "description": "The content types of the border's fill."
        },
        "position": {
          "$ref": "#/definitions/BorderPosition",
          "description": "The position types of the border relative to the boundary."
        },
        "thickness": {
          "type": "number",
          "description": "The thickness of the border.\nThis attribute only works if `borderWeightsIndependent` is set to `false`."
        },
        "borderWeightsIndependent": {
          "type": "boolean",
          "description": "For rectangles only. If `true`, independent border weights for all four sides.\nDefault value is `false`."
        },
        "topWeight": {
          "type": "number",
          "description": "This is used only when `borderWeightsIndependent` is set to true, in order to specify the border weight at the top of the rectangle. Default value is `0`."
        },
        "leftWeight": {
          "type": "number",
          "description": "This is used only when `borderWeightsIndependent` is set to true, in order to specify the border weight at the left of the rectangle. Default value is `0`."
        },
        "bottomWeight": {
          "type": "number",
          "description": "This is used only when `borderWeightsIndependent` is set to true, in order to specify the border weight at the bottom of the rectangle. Default value is `0`."
        },
        "rightWeight": {
          "type": "number",
          "description": "This is used only when `borderWeightsIndependent` is set to true, in order to specify the border weight at the right of the rectangle. Default value is `0`."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the border."
        },
        "gradient": {
          "$ref": "#/definitions/Gradient",
          "description": "The gradient of the border's fill."
        },
        "pattern": {
          "$ref": "#/definitions/Pattern",
          "description": "The pattern of the border's fill."
        },
        "style": {
          "type": "integer",
          "description": "The type of the border style. The dashed style is further specified in `dashedOffset` and `dashedPattern`.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["solid", "dotted", "dashed"]
        },
        "dashedPattern": {
          "type": "array",
          "description": "A list of values that describe the lengths of dashes (filled regions) and gaps (empty regions) in a `dashed` border by repeating themselves.",
          "items": {
            "type": "number"
          }
        },
        "dashedOffset": {
          "type": "number",
          "description": "Border dash initial offset. (applies to `dashed` borders)\nIf it is positive, it is offset to the left.\nIf it is negative, it is offset to the right.\nUnits: pixel."
        },
        "lineCapStyle": {
          "$ref": "#/definitions/LineCapStyle",
          "description": "The shape styles at the end of border lines."
        },
        "lineJoinStyle": {
          "$ref": "#/definitions/LineJoinStyle",
          "description": "The shape style at the corner of two border lines."
        },
        "miterLimit": {
          "type": "number",
          "description": "When the angle between two adjacent border lines is less than this value, a `miter` join is used instead."
        },
        "flat": {
          "type": "number",
          "description": "The flatness parameter specifies the accuracy or smoothness with which curves are rendered as a sequence of flat line segments.\nDefault value is `0`.",
          "maximum": 100,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "Color": {
      "title": "Color",
      "description": "A RGBA color value.",
      "type": "object",
      "$id": "#Color",
      "required": ["class", "alpha", "red", "green", "blue"],
      "properties": {
        "class": {
          "type": "string",
          "const": "color"
        },
        "alpha": {
          "description": "The opacity of the object. `0` represents transparent, and `1` represents opaque.",
          "$ref": "#/definitions/UnitInterval"
        },
        "red": {
          "$ref": "#/definitions/UnitInterval"
        },
        "green": {
          "$ref": "#/definitions/UnitInterval"
        },
        "blue": {
          "$ref": "#/definitions/UnitInterval"
        }
      },
      "additionalProperties": false
    },
    "FillType": {
      "title": "Fill Type",
      "type": "integer",
      "description": "The content types of a fill.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["color", "gradient", "pattern"],
      "$id": "#FillType"
    },
    "BorderPosition": {
      "title": "Border Position",
      "type": "integer",
      "description": "The position types of the border relative to the boundary.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["center", "inside", "outside"],
      "$id": "#BorderPosition"
    },
    "Gradient": {
      "title": "Gradient",
      "description": "Define a gradient.",
      "type": "object",
      "$id": "#Gradient",
      "required": ["class", "instance"],
      "properties": {
        "class": {
          "type": "string",
          "const": "gradient"
        },
        "instance": {
          "description": "One of the gradients listed below.",
          "oneOf": [
            {
              "$ref": "#/definitions/GradientAngular"
            },
            {
              "$ref": "#/definitions/GradientLinear"
            },
            {
              "$ref": "#/definitions/GradientRadial"
            },
            {
              "$ref": "#/definitions/GradientDiamond"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "GradientAngular": {
      "title": "Gradient Angular",
      "description": "An angular gradient is a color effect that transitions radially or angularly, typically originating from a central point and expanding outward in a rotational pattern.",
      "type": "object",
      "$id": "#GradientAngular",
      "required": ["class", "from", "to", "stops", "ellipse"],
      "properties": {
        "class": {
          "type": "string",
          "const": "gradientAngular"
        },
        "from": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "to": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "stops": {
          "type": "array",
          "description": "A list of positions shows how the colors transition from one to another in a clockwise direction.\nIf the number of items is `1`, it means the color of the stop will not transition.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "ellipse": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/Point"
            }
          ],
          "description": "When the type is set to `number`, the line connecting `from` to `to` is regarded as one semi-axis of the ellipse, denoted as `A`. The length of the other semi-axis of the ellipse is denoted as `B`. Then, `ellipse = B / A`, which is used to represent the shape of the gradient. The semi-axis `B` is perpendicular to `A` and takes the counterclockwise direction.\nWhen the type is set to `point`, it represents another point on the ellipse with a relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        }
      },
      "additionalProperties": false
    },
    "Point": {
      "title": "Point",
      "description": "A list of two elements: `[x, y]`.",
      "type": "array",
      "maxItems": 2,
      "minItems": 2,
      "$id": "#Point",
      "items": {
        "type": "number"
      }
    },
    "GradientStop": {
      "title": "Gradient Stop",
      "description": "A color stop defines a position on the gradient ramp that marks the start or stop of a color transition.",
      "type": "object",
      "$id": "#GradientStop",
      "required": ["class", "color", "position", "midPoint"],
      "properties": {
        "class": {
          "type": "string",
          "const": "gradientStop"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "position": {
          "$ref": "#/definitions/UnitInterval",
          "description": "A number giving the position of the color stop on the gradient ramp."
        },
        "midPoint": {
          "$ref": "#/definitions/UnitInterval",
          "description": "A position between the current color stop and the next one, where there is an equal mix of the two colors.\n`midPoint` is a percentage of the distance between the two color stops. ***Default value is `0.5`.***\nThe `midPoint` is ignored for the last color stop, except in the case of angular gradients."
        }
      },
      "additionalProperties": false
    },
    "GradientLinear": {
      "title": "Gradient Linear",
      "description": "A linear gradient refers to the effect of transitioning between two or more different colors in a straight line.",
      "type": "object",
      "$id": "#GradientLinear",
      "required": ["class", "from", "to", "stops"],
      "properties": {
        "class": {
          "type": "string",
          "const": "gradientLinear"
        },
        "from": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "to": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "stops": {
          "type": "array",
          "description": "A list of positions shows how the colors transition from one to another.\nIf the number of items is `1`, it means the color of the stop will not transition.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        }
      },
      "additionalProperties": false
    },
    "GradientRadial": {
      "title": "Gradient Radial",
      "description": "A radial gradient is a color effect that transitions radially around a point.",
      "type": "object",
      "$id": "#GradientRadial",
      "required": ["class", "from", "to", "stops", "ellipse"],
      "properties": {
        "class": {
          "type": "string",
          "const": "gradientRadial"
        },
        "from": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "to": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "stops": {
          "type": "array",
          "description": "A list of positions shows how the colors transition from one to another.\nIf the number of items is `1`, it means the color of the stop will not transition.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "ellipse": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/Point"
            }
          ],
          "description": "When the type is set to `number`, the line connecting `from` to `to` is regarded as one semi-axis of the ellipse, denoted as `A`. The length of the other semi-axis of the ellipse is denoted as `B`. Then, `ellipse = B / A`, which is used to represent the shape of the gradient. The semi-axis `B` is perpendicular to `A` and takes the counterclockwise direction.\nWhen the type is set to `point`, it represents another point on the ellipse with a relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        }
      },
      "additionalProperties": false
    },
    "GradientDiamond": {
      "title": "Gradient Diamond",
      "description": "A diamond gradient is a color effect that transitions similar to the luster of a diamond.",
      "type": "object",
      "$id": "#GradientDiamond",
      "required": ["class", "from", "to", "stops", "ellipse"],
      "properties": {
        "class": {
          "type": "string",
          "const": "gradientDiamond"
        },
        "from": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "to": {
          "$ref": "#/definitions/Point",
          "description": "A relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        },
        "stops": {
          "type": "array",
          "description": "A list of positions shows how the colors transition from one to another.\nIf the number of items is `1`, it means the color of the stop will not transition.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "ellipse": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/Point"
            }
          ],
          "description": "When the type is set to `number`, the line connecting `from` to `to` is regarded as one semi-axis of the ellipse, denoted as `A`. The length of the other semi-axis of the ellipse is denoted as `B`. Then, `ellipse = B / A`, which is used to represent the shape of the gradient. The semi-axis `B` is perpendicular to `A` and takes the counterclockwise direction.\nWhen the type is set to `point`, it represents another point on the ellipse with a relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`."
        }
      },
      "additionalProperties": false
    },
    "Pattern": {
      "title": "Pattern",
      "description": "Define a pattern.",
      "type": "object",
      "$id": "#Pattern",
      "required": ["class", "instance"],
      "properties": {
        "class": {
          "type": "string",
          "const": "pattern"
        },
        "instance": {
          "description": "One of the patterns listed below.",
          "oneOf": [
            {
              "$ref": "#/definitions/PatternImageFill"
            },
            {
              "$ref": "#/definitions/PatternImageStretch"
            },
            {
              "$ref": "#/definitions/PatternImageFit"
            },
            {
              "$ref": "#/definitions/PatternImageTile"
            },
            {
              "$ref": "#/definitions/PatternLayerInstance"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PatternImageFill": {
      "title": "Pattern Image Fill",
      "description": "Use an image as the content of the pattern. The pattern type is fill.",
      "type": "object",
      "$id": "#PatternImageFill",
      "required": ["class", "imageFileName", "rotation"],
      "properties": {
        "class": {
          "type": "string",
          "const": "patternImageFill"
        },
        "imageFileName": {
          "type": "string",
          "description": "File name of the image."
        },
        "rotation": {
          "type": "number",
          "description": "Rotation of the image in degrees. Positive values represent counterclockwise rotation. Rotate around the center of the image."
        },
        "imageFilters": {
          "$ref": "#/definitions/ImageFilters",
          "description": "Adjust the colors of the image."
        }
      },
      "additionalProperties": false
    },
    "ImageFilters": {
      "title": "Image Filters",
      "description": "Adjust the detailed colors of an image.",
      "type": "object",
      "$id": "#ImageFilters",
      "required": ["class", "isEnabled"],
      "properties": {
        "class": {
          "type": "string",
          "const": "imageFilters"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "exposure": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "contrast": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "saturation": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "temperature": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "tint": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "highlights": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "shadows": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "hue": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        }
      },
      "additionalProperties": false
    },
    "PatternImageStretch": {
      "title": "Pattern Image Stretch",
      "description": "Use an image as the content of the pattern. The pattern type is stretch.",
      "type": "object",
      "$id": "#PatternImageStretch",
      "required": ["class", "imageFileName", "matrix"],
      "properties": {
        "class": {
          "type": "string",
          "const": "patternImageStretch"
        },
        "imageFileName": {
          "type": "string",
          "description": "File name of the image."
        },
        "matrix": {
          "description": "Image matrix.\nLet the width and height of the widget be `w` and `h`, the width and height of the image be `iw` and `ih`.\nDefine `Mw = [[w, 0, 0], [0, h, 0], [0, 0, 1]]`, and `Mi = [[1 / iw, 0, 0], [0, 1 / ih, 0], [0, 0, 1]]`.\nFinally, apply the `Mw * matrix * Mi * P` transformation to each of the four vertices of the image `(0, 0), (0, iw), (iw, -ih), (0, -ih)`, where `P` represents a vertex of the image, to obtain the position of the image in the widget coordinate system.",
          "$ref": "#/definitions/Matrix"
        },
        "imageFilters": {
          "$ref": "#/definitions/ImageFilters",
          "description": "Adjust the colors of the image."
        }
      },
      "additionalProperties": false
    },
    "Matrix": {
      "title": "Matrix",
      "description": "A list of six elements: `[a, b, c, d, tx, ty]`.",
      "type": "array",
      "maxItems": 6,
      "minItems": 6,
      "$id": "#Matrix",
      "items": {
        "type": "number"
      }
    },
    "PatternImageFit": {
      "title": "Pattern Image Fit",
      "description": "Use an image as the content of the pattern. The pattern type is fit.",
      "type": "object",
      "$id": "#PatternImageFit",
      "required": ["class", "imageFileName", "rotation"],
      "properties": {
        "class": {
          "type": "string",
          "const": "patternImageFit"
        },
        "imageFileName": {
          "type": "string",
          "description": "File name of the image."
        },
        "rotation": {
          "type": "number",
          "description": "Rotation of the image in degrees. Positive values represent counterclockwise rotation. Rotate around the center of the image."
        },
        "imageFilters": {
          "$ref": "#/definitions/ImageFilters",
          "description": "Adjust the colors of the image."
        }
      },
      "additionalProperties": false
    },
    "PatternImageTile": {
      "title": "Pattern Image Tile",
      "description": "Use an image as the content of the pattern. The pattern type is tile.",
      "type": "object",
      "$id": "#PatternImageTile",
      "required": ["class", "scale", "rotation", "imageFileName"],
      "properties": {
        "class": {
          "type": "string",
          "const": "patternImageTile"
        },
        "mirror": {
          "type": "boolean",
          "description": "Whether to mirror the image repetitively.\nDefault value is `false`."
        },
        "scale": {
          "type": "number",
          "description": "Image scaling ratio.\n`0.5` means `50%`, `2` means `200%`, and so on."
        },
        "mode": {
          "type": "integer",
          "description": "Tile the image in which direction.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "horizontal and vertical(default value)",
            "only horizontal",
            "only vertical"
          ]
        },
        "rotation": {
          "type": "number",
          "description": "Rotation of the image in degrees. Positive values represent counterclockwise rotation. Rotate around the center of the image."
        },
        "imageFileName": {
          "type": "string",
          "description": "File name of the image."
        },
        "imageFilters": {
          "$ref": "#/definitions/ImageFilters",
          "description": "Adjust the colors of the image."
        }
      },
      "additionalProperties": false
    },
    "PatternLayerInstance": {
      "title": "Pattern layer",
      "description": "Use a layer as the content of the pattern.",
      "type": "object",
      "$id": "#PatternLayerInstance",
      "required": [
        "class",
        "refLayerName",
        "offset",
        "scale",
        "angle",
        "reflection",
        "r",
        "shear",
        "shearAxis",
        "matrix"
      ],
      "properties": {
        "class": {
          "type": "string",
          "const": "patternLayer"
        },
        "refLayerName": {
          "type": "string",
          "description": "The name (UTF-8) of the referenced pattern layer. Note that this is the name of the pattern layer, not its ID. The pattern layer name is unique."
        },
        "offset": {
          "$ref": "#/definitions/Point",
          "description": "Specify the offset from the ruler origin to be used for tiling the pattern. Each distance is specified in points."
        },
        "scale": {
          "$ref": "#/definitions/Point",
          "description": "Specify the scale factors to be applied to the x and y dimensions, respectively, of the pattern."
        },
        "angle": {
          "type": "number",
          "description": "Specifies the angle in counterclockwise degrees to rotate the pattern."
        },
        "reflection": {
          "type": "boolean",
          "description": "Whether to apply a reflection to the pattern."
        },
        "r": {
          "type": "number",
          "description": "Specifies the angle of the line about which the pattern is reflected, measured in degrees counterclockwise from the origin. This is used if the `reflection` operand is `true`."
        },
        "shear": {
          "type": "number",
          "description": "Specifies the shear angle."
        },
        "shearAxis": {
          "type": "number",
          "description": "Specifies the shear axis."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Specifies the initial matrix to which all other pattern transformations are to be applied. This matrix describes transformations that are not otherwise expressible as the single combination of the other transformations."
        }
      },
      "additionalProperties": false
    },
    "LineCapStyle": {
      "title": "Line Cap Style",
      "type": "integer",
      "description": "The shape styles at the end of border lines.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["butt", "round", "square"],
      "$id": "#LineCapStyle"
    },
    "LineJoinStyle": {
      "title": "Line Join Style",
      "type": "integer",
      "description": "The shape style at the corner of two border lines.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["miter", "round", "bevel"],
      "$id": "#LineJoinStyle"
    },
    "Fill": {
      "title": "Fill",
      "description": "Define a fill style of an object.",
      "type": "object",
      "$id": "#Fill",
      "required": ["class", "isEnabled", "fillType", "contextSettings"],
      "properties": {
        "class": {
          "type": "string",
          "const": "fill"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "The color of the fill."
        },
        "fillType": {
          "$ref": "#/definitions/FillType",
          "description": "The content type of the fill."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the fill."
        },
        "gradient": {
          "$ref": "#/definitions/Gradient",
          "description": "The gradient of the fill."
        },
        "pattern": {
          "$ref": "#/definitions/Pattern",
          "description": "The pattern of the fill."
        }
      },
      "additionalProperties": false
    },
    "Blur": {
      "title": "Blur",
      "description": "Define a blur style of an object.",
      "type": "object",
      "$id": "#Blur",
      "required": ["class", "type", "isEnabled", "radius"],
      "properties": {
        "class": {
          "type": "string",
          "const": "blur"
        },
        "type": {
          "$ref": "#/definitions/BlurType",
          "description": "The type of blur."
        },
        "isEnabled": {
          "type": "boolean"
        },
        "radius": {
          "type": "number",
          "description": "The range of the area where the blur takes effect."
        },
        "motionAngle": {
          "type": "number",
          "description": "The angle of the blur direction applies only to the `motion` blur.\nDefault value is `0`."
        },
        "center": {
          "$ref": "#/definitions/Point",
          "description": "The center of the blur applies only to the `zoom` blur.\nA relative coordinate according to the `bounds`, where `(0, 0)` represents the top-left corner of the `bounds`, and `(1, -1)` represents the bottom-right corner of the `bounds`.\nDefault value is `(0.5, -0.5)`."
        },
        "saturation": {
          "type": "number",
          "description": "The saturation level of the blur applies only to the `background` blur.\nDefault value is `1`."
        }
      },
      "additionalProperties": false
    },
    "BlurType": {
      "title": "Blur Type",
      "description": "The types of blur.",
      "type": "integer",
      "enum": [0, 1, 2, 3],
      "enumDescriptions": ["gaussian", "motion", "zoom", "background"],
      "$id": "#BlurType"
    },
    "Shadow": {
      "title": "Shadow",
      "description": "Define a shadow style of an object.",
      "type": "object",
      "$id": "#Shadow",
      "required": [
        "class",
        "isEnabled",
        "color",
        "offsetX",
        "offsetY",
        "blur",
        "spread",
        "contextSettings",
        "inner"
      ],
      "properties": {
        "class": {
          "type": "string",
          "const": "shadow"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "The color of the shadow."
        },
        "offsetX": {
          "type": "number",
          "description": "The horizontal offset of the shadow in relation to the object. Direction to the right."
        },
        "offsetY": {
          "type": "number",
          "description": "The vertical upward offset of the shadow in relation to the object."
        },
        "blur": {
          "type": "number",
          "description": "The degree of shadow blur."
        },
        "spread": {
          "type": "number",
          "description": "The distance that the shadow spreads from the object, the farther it is, the larger the shadow."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the shadow."
        },
        "inner": {
          "type": "boolean",
          "description": "If `true`, it's an inner shadow."
        },
        "showBehindTransparentAreas": {
          "type": "boolean",
          "description": "When the object has a transparent fill and a non-inner shadow, whether the shadow is visible through the transparent area.\nDefault value is `false`."
        }
      },
      "additionalProperties": false
    },
    "Rect": {
      "title": "Rect",
      "description": "A rectangle.",
      "type": "object",
      "$id": "#Rect",
      "required": [
        "class",
        "constrainProportions",
        "height",
        "width",
        "x",
        "y"
      ],
      "properties": {
        "class": {
          "type": "string",
          "const": "rect"
        },
        "constrainProportions": {
          "type": "boolean",
          "description": "Whether to keep the height and width ratio constant while scaling."
        },
        "height": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "x": {
          "type": "number",
          "description": "The X coordinate of the top-left corner point.\nThe X-axis increases to the right."
        },
        "y": {
          "type": "number",
          "description": "The Y coordinate of the top-left corner point.\nThe Y-axis increases to the up."
        }
      },
      "additionalProperties": false
    },
    "AlphaMask": {
      "title": "Alpha Mask",
      "type": "object",
      "description": "Define the alpha mask effect for the object, using some values of the mask to control the transparency of the object.",
      "$id": "#AlphaMask",
      "required": ["class", "id", "alphaType", "crop"],
      "properties": {
        "class": {
          "type": "string",
          "const": "alphaMask"
        },
        "id": {
          "type": "string",
          "description": "Object ID of the mask."
        },
        "alphaType": {
          "type": "integer",
          "description": "The data type whose values are used to control the transparency of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "alpha. Directly control the object's transparency using the values of the mask's Alpha channel.",
            "luminosity. Control the object's transparency using the values of the mask's luminosity.",
            "inverse-luminosity. Similar to `luminosity`, but with the opposite effect."
          ]
        },
        "crop": {
          "type": "boolean",
          "description": "Whether to use the mask's boundary to crop the masked object."
        }
      },
      "additionalProperties": false
    },
    "Constraint": {
      "title": "Constraint",
      "description": "Horizontal and vertical constraints for the object relative to its parent container.\nIn the horizontal direction, `start` indicates the left, and `end` indicates the right.\nIn the vertical direction, `start` identifies the top, and `end` identifies the bottom.",
      "type": "integer",
      "enum": [0, 1, 2, 3, 4, 5, 6, 7],
      "enumDescriptions": [
        "Fix the `start` and `end` positions.",
        "Fix the `start` position and size.",
        "Fix the `start` position and apply scaling.\nFor example, let the parent container be `300` units wide, and the child object has an x-coordinate of `30` and a width of `120`. When the width of the parent container becomes `500`, the x-coordinate of the child object remains `30`, and the width becomes `(120 / (300 - 30)) * (500 - 30) = 208.89`.",
        "Fix the `end` position and size.",
        "Fix the `end` position and apply scaling.",
        "Scale.\nFor example, let the parent container be `300` units wide, and the child object has an x-coordinate of `30` and a width of `120`. When the width of the parent container becomes `500`, the x-coordinate of the child object becomes `30 / 300 * 500 = 50`, and the width becomes `120 / 300 * 500 = 200`.",
        "Fix the center proportion and maintain a fixed size.\nFor example, let the parent container be `300` units wide, and the child object has an x-coordinate of `90` and a width of `120`. When the width of the parent container becomes `500`, the x-coordinate of the child object becomes `(90 + 120 / 2) / 300 * 500 - 120 / 2 = 190`, and the width remains `120`.",
        "Keep the centerline distance between the child object and the parent container constant.\nFor example, let the parent container be `300` units wide, and the child object has an x-coordinate of `30` and a width of `120`. When the width of the parent container becomes `500`, the x-coordinate of the child object becomes `500 / 2 - (300 / 2 - (30 + 120 / 2)) - 120 / 2 = 130`, and the width remains `120`."
      ],
      "$id": "#Constraint"
    },
    "VariableDef": {
      "title": "Variable Define",
      "description": "Define a variable.",
      "type": "object",
      "$id": "#VariableDef",
      "required": ["class", "id", "varType", "value"],
      "properties": {
        "class": {
          "type": "string",
          "const": "variableDef"
        },
        "id": {
          "type": "string",
          "description": "The ID of the variable is not globally unique but unique under the object tree."
        },
        "varType": {
          "type": "integer",
          "description": "The value type of the variable.",
          "enum": [1, 2, 3, 4],
          "enumDescriptions": [
            "boolean",
            "textProperty: contains some attributes of the text.",
            "string",
            "reference: references the definition of another variable, where `value` is a string and pointing to the ID of the referenced variable."
          ]
        },
        "value": {
          "description": "The value of the variable, whose type is determined by `varType`.\nIn the master, the object refers to a variable, and you don't need to care about the value of the variable; you just use its own value.\nIn an instance, if the variable is not reassigned, the value of the corresponding variable in the master is used.\nIn an instance, reassigning a variable affects all objects in that instance that reference the variable.\nIn an instance, the direct override of a property takes precedence over the value of the corresponding variable."
        }
      },
      "additionalProperties": false
    },
    "VariableRef": {
      "title": "Variable Refer",
      "description": "Referencing a variable.",
      "type": "object",
      "$id": "#VariableRef",
      "required": ["class", "id", "objectField"],
      "properties": {
        "class": {
          "type": "string",
          "const": "variableRef"
        },
        "id": {
          "type": "string",
          "description": "The ID of the referenced variable which defined in `VariableDefine`."
        },
        "objectField": {
          "type": "string",
          "description": "Describes how a referenced variable acts on a specific property of an object.\nWhen the `varType` of the variable is `2`, the field is fixed to `textData`.\nWhen the `varType` is anything else, the field points to a property of the object (check `overrideName` in `OverrideValue`)."
        }
      },
      "additionalProperties": false
    },
    "Path": {
      "title": "Path",
      "description": "Path represents a vector geometry which is formed by individual subpaths combined together via boolean operations.",
      "$id": "#Path",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "contextSettings",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "shape",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "class": {
          "type": "string",
          "const": "path"
        },
        "shape": {
          "$ref": "#/definitions/Shape",
          "description": "The shape of the path, describing the details of the path."
        }
      },
      "additionalProperties": false
    },
    "Shape": {
      "title": "Shape",
      "description": "The shape of a path. Shape represents a vector geometry which is formed by individual subshapes combined together via boolean operations.",
      "type": "object",
      "$id": "#Shape",
      "required": ["class", "subshapes", "windingRule"],
      "properties": {
        "class": {
          "type": "string",
          "const": "shape"
        },
        "subshapes": {
          "type": "array",
          "description": "A list of subshapes in the shape.",
          "items": {
            "$ref": "#/definitions/SubShape"
          }
        },
        "windingRule": {
          "type": "integer",
          "description": "The rule determining whether an area is inside or outside a path.\nNote: For `vectorNetwork`, this property should be ignored.",
          "enum": [0, 1],
          "enumDescriptions": ["non-zero", "even-odd"]
        },
        "radius": {
          "type": "number",
          "description": "The radius of the shape, when the `subshapes` have boolean operations.\nAffects the corners of all `subshapes` under the shape, as well as the corners of the overlapping region of the `subshapes`.\nThe `radius` of the subshapes override this radius."
        }
      },
      "additionalProperties": false
    },
    "SubShape": {
      "title": "Subshape",
      "description": "One subshape in a shape.",
      "type": "object",
      "$id": "#SubShape",
      "required": ["class", "subGeometry", "booleanOperation"],
      "properties": {
        "class": {
          "type": "string",
          "const": "subshape"
        },
        "subGeometry": {
          "description": "Describes the detailed shape of the subshape through a contour with a list of points, a specified geometry, or another object.\nWhen the `frame`, `symbol-instance`, and `symbol-master` are in `subGeometry`, only the `childObjects` will be used, and the bounding box will be ignored.\nAny mask nested within this object will be invalidated.",
          "oneOf": [
            {
              "$ref": "#/definitions/Contour"
            },
            {
              "$ref": "#/definitions/VectorNetwork"
            },
            {
              "$ref": "#/definitions/Ellipse"
            },
            {
              "$ref": "#/definitions/Polygon"
            },
            {
              "$ref": "#/definitions/Rectangle"
            },
            {
              "$ref": "#/definitions/Star"
            },
            {
              "$ref": "#/definitions/Text"
            },
            {
              "$ref": "#/definitions/Image"
            },
            {
              "$ref": "#/definitions/Path"
            },
            {
              "$ref": "#/definitions/Group"
            },
            {
              "$ref": "#/definitions/SymbolMaster"
            },
            {
              "$ref": "#/definitions/SymbolInstance"
            },
            {
              "$ref": "#/definitions/Frame"
            }
          ]
        },
        "booleanOperation": {
          "type": "integer",
          "description": "Boolean operations that combine the current subshape with the previous subshape in the array.",
          "enum": [0, 1, 2, 3, 4],
          "enumDescriptions": [
            "union",
            "subtraction",
            "intersecion",
            "exclusion",
            "useWindingRule: The final display area is determined by the windingRule of the top-level path object."
          ]
        }
      },
      "additionalProperties": false
    },
    "Contour": {
      "title": "Contour",
      "description": "The contour of a shape.",
      "type": "object",
      "$id": "#Contour",
      "required": ["class", "closed", "points"],
      "properties": {
        "class": {
          "type": "string",
          "const": "contour"
        },
        "closed": {
          "type": "boolean",
          "description": "Whether the path is open or closed."
        },
        "points": {
          "type": "array",
          "description": "An array of points that consist of the contour of the shape.",
          "items": {
            "$ref": "#/definitions/PointAttr"
          }
        }
      },
      "additionalProperties": false
    },
    "PointAttr": {
      "title": "Point Attr",
      "description": "The attributes of a point on the contour of a shape.",
      "type": "object",
      "$id": "#PointAttr",
      "required": ["class", "point"],
      "properties": {
        "class": {
          "type": "string",
          "const": "pointAttr"
        },
        "radius": {
          "type": "number",
          "description": "Corner radius at the point."
        },
        "cornerStyle": {
          "type": "integer",
          "description": "Corner shapes of the point.",
          "enum": [0, 1, 2, 3],
          "enumDescriptions": [
            "rounded",
            "inverted rounded",
            "angled",
            "squared"
          ]
        },
        "curveFrom": {
          "$ref": "#/definitions/Point",
          "description": "When the current point is the starting point of the Bezier curve, this attribute represents its control point."
        },
        "curveTo": {
          "$ref": "#/definitions/Point",
          "description": "When the current point is the end point of the Bezier curve, this attribute represents its control point."
        },
        "point": {
          "$ref": "#/definitions/Point",
          "description": "The coordinates of the point before the matrix transformation."
        },
        "markType": {
          "$ref": "#/definitions/MarkerType",
          "description": "The shape type of the point. This property only applies to endpoints."
        }
      },
      "additionalProperties": false
    },
    "MarkerType": {
      "title": "Marker Type",
      "description": "A shape type used to identify the starting and ending points in a path.",
      "type": "integer",
      "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      "enumDescriptions": [
        "none",
        "open arrow",
        "filled arrow",
        "line",
        "open circle",
        "filled circle",
        "open square",
        "filled square",
        "reversed triangle",
        "diamond arrow",
        "round",
        "square"
      ],
      "$id": "#MarkerType"
    },
    "VectorNetwork": {
      "title": "Vector NetWork",
      "type": "object",
      "description": "A vector network improves on the path model by allowing lines and curves between any two points, instead of requiring that they all join up to form a single chain.",
      "$id": "#VectorNetwork",
      "required": ["class", "vertices", "segments", "regions"],
      "properties": {
        "class": {
          "type": "string",
          "const": "vectorNetwork"
        },
        "vertices": {
          "type": "array",
          "description": "A list of vertices used in the vector network.",
          "items": {
            "$ref": "#/definitions/Vertex"
          }
        },
        "segments": {
          "type": "array",
          "description": "A list of segments used in the vector network.",
          "items": {
            "$ref": "#/definitions/Segment"
          }
        },
        "regions": {
          "type": "array",
          "description": "A list of regions used in the vector network.\nWhen `regions` are empty, all `segments` automatically form a region, and all closed areas composed of `segments` will be filled according to the filling rules of the path object.\nWhen `regions` are not empty, for `segments` that are not used in `regions`, it is sufficient to draw them directly without considering the filling.",
          "items": {
            "$ref": "#/definitions/Region"
          }
        }
      },
      "additionalProperties": false
    },
    "Vertex": {
      "title": "Vertex",
      "description": "A vertex in a vector network.",
      "type": "object",
      "$id": "#Vertex",
      "required": ["class", "point"],
      "properties": {
        "class": {
          "type": "string",
          "const": "vertex"
        },
        "radius": {
          "type": "number",
          "description": "Corner radius at the vertex."
        },
        "point": {
          "$ref": "#/definitions/Point",
          "description": "The coordinates of the point before the matrix transformation."
        },
        "markType": {
          "$ref": "#/definitions/MarkerType",
          "description": "The shape type of the vertex. This property only applies to endpoints."
        }
      },
      "additionalProperties": false
    },
    "Segment": {
      "title": "Segment",
      "description": "A segment in a vector network.",
      "type": "object",
      "$id": "#Segment",
      "required": ["class", "start", "end"],
      "properties": {
        "class": {
          "type": "string",
          "const": "segment"
        },
        "start": {
          "type": "integer",
          "description": "The starting point of the segment. The number is the index of the `vertices` list in `Vector NetWork`, starting from `0`."
        },
        "end": {
          "type": "integer",
          "description": "The ending point of the segment. The number is the index of the `vertices` list in `Vector NetWork`, starting from `0`."
        },
        "curveFrom": {
          "$ref": "#/definitions/Point",
          "description": "The control point of the starting point of the Bezier curve."
        },
        "curveTo": {
          "$ref": "#/definitions/Point",
          "description": "The control point of the ending point of the Bezier curve."
        }
      },
      "additionalProperties": false
    },
    "Region": {
      "title": "Region",
      "description": "A region in a vector network.",
      "type": "object",
      "$id": "#Region",
      "required": ["class", "loops", "windingRule"],
      "properties": {
        "class": {
          "type": "string",
          "const": "region"
        },
        "loops": {
          "type": "array",
          "description": "A list of loops of the region.\nNote: A loop is a part of the region, which is not necessarily closed.",
          "items": {
            "type": "array",
            "description": "A list of segments that make up the loop. The numbers are the indices of the `segments` list in `Vector NetWork`, starting from `0`.\nNote: The segments of a loop are not necessarily ordered."
          }
        },
        "fills": {
          "type": "array",
          "description": "A list of the fill styles of the region. If it's missing, the `style.fills` of the top-level object is uesd.",
          "items": {
            "$ref": "#/definitions/Fill"
          }
        },
        "windingRule": {
          "type": "integer",
          "description": "The rule determining whether an area is inside or outside a region.",
          "enum": [0, 1],
          "enumDescriptions": ["non-zero", "even-odd"]
        }
      },
      "additionalProperties": false
    },
    "Ellipse": {
      "title": "Ellipse",
      "type": "object",
      "description": "An elliptical or sector shape. The object's bounds determine the size of the ellipse.",
      "$id": "#Ellipse",
      "required": ["class", "startingAngle", "endingAngle", "innerRadius"],
      "properties": {
        "class": {
          "type": "string",
          "const": "ellipse"
        },
        "startingAngle": {
          "type": "number",
          "description": "The starting angle of the sector sweep.\nThe three o'clock direction is defined as `0`, increasing in the clockwise direction.\nIf `startingAngle` is less than `endingAngle`, the filled area spans from `startingAngle` to `endingAngle` clockwise; otherwise, counterclockwise."
        },
        "endingAngle": {
          "type": "number",
          "description": "The ending angle of the sector sweep.\nThe three o'clock direction is defined as `0`, increasing in the clockwise direction.\nIf `startingAngle` is less than `endingAngle`, the filled area spans from `startingAngle` to `endingAngle` clockwise; otherwise, counterclockwise."
        },
        "innerRadius": {
          "type": "number",
          "description": "A ratio of inner radius to the outer radius.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "additionalProperties": false
    },
    "Polygon": {
      "title": "polygon",
      "type": "object",
      "description": "A polygon shape.",
      "$id": "#Polygon",
      "required": ["class", "pointCount"],
      "properties": {
        "class": {
          "type": "string",
          "const": "polygon"
        },
        "radius": {
          "type": "number",
          "description": "The radius of all the corners of the polygon.\nDefault value is `0`."
        },
        "pointCount": {
          "type": "integer",
          "description": "The number of polygon vertices, which can determine the positions of the vertices on the object's bounds."
        }
      },
      "additionalProperties": false
    },
    "Rectangle": {
      "title": "Rectangle",
      "type": "object",
      "description": "A rectangular shape, determined by the object's bounds.",
      "$id": "#Rectangle",
      "required": ["class"],
      "properties": {
        "class": {
          "type": "string",
          "const": "rectangle"
        },
        "radius": {
          "type": "array",
          "description": "The radius values correspond to the corners in the following order: left-top, right-top, right-bottom, left-bottom.\nDefault value is `[0, 0, 0, 0]`.",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        }
      },
      "additionalProperties": false
    },
    "Star": {
      "title": "Star",
      "type": "object",
      "description": "A star shape.",
      "$id": "#Star",
      "required": ["class", "ratio", "pointCount"],
      "properties": {
        "class": {
          "type": "string",
          "const": "star"
        },
        "radius": {
          "type": "number",
          "description": "The radius of all the corners of the star.\nDefault value is `0`."
        },
        "ratio": {
          "type": "number",
          "description": "Ratio refers to the size of the star within the polygon shape.",
          "minimum": 0,
          "maximum": 1
        },
        "pointCount": {
          "type": "integer",
          "description": "The number of star vertices, which can determine the positions of the vertices on the object's bounds."
        }
      },
      "additionalProperties": false
    },
    "Text": {
      "title": "Text",
      "description": "Details of a text.",
      "$id": "#Text",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "content",
        "contextSettings",
        "fontAttr",
        "frameMode",
        "horizontalAlignment",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "verticalAlignment",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "class": {
          "type": "string",
          "const": "text"
        },
        "content": {
          "type": "string",
          "description": "The text content of the text object.\nThe encoding format is UTF-8."
        },
        "anchorPoint": {
          "$ref": "#/definitions/Point",
          "description": "The position of the first character baseline when text is drawn.\nHorizontal and vertical alignments have been considered. The given coordinates are in the object's own coordinate system.\nIf this property doesn't exist, text is drawn using `bounds`."
        },
        "textOnPath": {
          "$ref": "#/definitions/TextOnPath",
          "description": "The text is arranged along the path."
        },
        "frameMode": {
          "type": "integer",
          "description": "The mode of the text frame size.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "fixed. The size of the text frame is fixed.",
            "auto width. The width and height of the text frame are both adaptive.",
            "auto height. The height of the text frame is adaptive, and the width is fixed."
          ]
        },
        "truncatedHeight": {
          "type": "number",
          "description": "The maximum height that can be displayed inside the text frame, with any text exceeding this height being truncated."
        },
        "verticalAlignment": {
          "type": "integer",
          "description": "The type of vertical alignment for the text.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["top", "center", "bottom"]
        },
        "horizontalAlignment": {
          "type": "array",
          "description": "The type of horizontal alignment for the text. When the number of items is less than the number of rows, the last value is reused.",
          "items": {
            "type": "integer",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "enumDescriptions": [
              "left",
              "right",
              "center",
              "justified",
              "natural",
              "justified, and the last line to the left",
              "justified, and the last line to the center",
              "justified, and the last line to the right"
            ]
          }
        },
        "defaultFontAttr": {
          "$ref": "#/definitions/FontAttr",
          "description": "The default font attributes of the text. If some font attributes are missing in `fontAttr`, take the font attributes here.\nThe value of `length` in this field is meaningless."
        },
        "fontAttr": {
          "type": "array",
          "description": "An ordered list, where each item sequentially describes the font attributes of a text fragment.\nIf some font attributes are missing in an item, take the font attributes from `defaultFontAttr`.",
          "items": {
            "$ref": "#/definitions/FontAttr"
          }
        },
        "textLineType": {
          "type": "array",
          "description": "A list with a length equals to the number of text lines, where each item describes the index preceding each line of text.",
          "items": {
            "$ref": "#/definitions/TextLineType"
          }
        },
        "verticalTrim": {
          "type": "boolean",
          "description": "If true, trim the text portion that extends beyond the text frame starting from the baseline, based on `verticalAlignment`\nDefault value is `false`."
        }
      },
      "additionalProperties": false
    },
    "TextOnPath": {
      "title": "Text On Path",
      "description": "Text on path, allowing text to be arranged along a specified path.",
      "type": "object",
      "$id": "#TextOnPath",
      "required": ["class"],
      "properties": {
        "class": {
          "type": "string",
          "const": "textOnPath"
        }
      },
      "additionalProperties": false
    },
    "FontAttr": {
      "title": "Text Font Attributes",
      "description": "The font attributes of a text fragment.",
      "type": "object",
      "$id": "#FontAttr",
      "required": ["class"],
      "properties": {
        "class": {
          "type": "string",
          "const": "fontAttr"
        },
        "length": {
          "type": "integer",
          "description": "The number of characters(UTF-8) that these attributes apply to.\nIf this property is missing, it means these attributes apply to all remaining characters in the text.\n**Note**:\n  If a UTF-8 character is `4` bytes, its length counts as `2`.\n  If a UTF-8 character is `1 ~ 3` bytes, its length counts as `1`."
        },
        "borders": {
          "type": "array",
          "description": "A list of the character's border styles. \nPriority: The `borders` of the text fragment > the `borders` in `defaultFontAttr` of the text > the `borders` in the text object's `style`.",
          "items": {
            "$ref": "#/definitions/Border"
          }
        },
        "fills": {
          "type": "array",
          "description": "A list of the character's fill effects. The priority of `fills` is listed in `fillUseType`.",
          "items": {
            "$ref": "#/definitions/Fill"
          }
        },
        "fillUseType": {
          "type": "integer",
          "description": "The priority of `fills`.",
          "enum": [0, 1],
          "enumDescriptions": [
            "The `fills` of the text fragment > the `fills` in `defaultFontAttr` of the text > the `fills` in the text object's `style`. (Default value)",
            "The corresponding property of the object takes precedence over `fills`. When `style.fills` and `fills` each have only one valid solid color object, the opacity of the two solid color objects is combined into the `style.fills` solid color object."
          ]
        },
        "name": {
          "type": "string",
          "description": "Common name of the font.\nThe font name may contain subfamily, in which case the `subFamilyName` will not appear.\nIf this property does not exist or is empty, the application can fall back to using its default font name."
        },
        "subFamilyName": {
          "type": "string",
          "description": "Subfamily name or font type.\nThe value may be empty."
        },
        "postScript": {
          "type": "string",
          "description": "The PostScript name of the font.\nThe value may be empty."
        },
        "fontVariations": {
          "type": "array",
          "description": "A list of font variations.",
          "items": {
            "$ref": "#/definitions/FontVariation"
          }
        },
        "size": {
          "type": "number",
          "description": "Font size.\nDefault value is `1`."
        },
        "letterSpacingValue": {
          "type": "number",
          "description": "Text character spacing value (can be negative).\nMust be used together with `letterSpacingUnit`.\nDefault value is `0`."
        },
        "letterSpacingUnit": {
          "type": "integer",
          "description": "The unit of `letterSpacingValue` value.",
          "enum": [0, 1],
          "enumDescriptions": [
            "pixel (default value)",
            "percent. Final pixel value equals to `size * letterSpacingValue / 100`."
          ]
        },
        "lineSpacingValue": {
          "type": "number",
          "description": "The spacing value of the text lines.\nMust be used together with `lineSpacingUnit`.\nDefault value is `0`."
        },
        "lineSpacingUnit": {
          "type": "integer",
          "description": "The unit of `lineSpacingValue` value.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "pixel (default value)",
            "auto. Use default font metrics height.",
            "raw. Final pixel value equals to `size * lineSpacingValue`."
          ]
        },
        "underline": {
          "type": "integer",
          "description": "The underline type of the text.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "none (default value)",
            "single line",
            "double line"
          ]
        },
        "linethrough": {
          "type": "boolean",
          "description": "Whether the text has a line through.\nDefault value is `false`."
        },
        "textCase": {
          "type": "integer",
          "description": "The type of text case.\n**Note**:\n  `textCase` and `fontVariantCaps` are mutually exclusive. If either item is nonzero, you can ignore the value of the other, as they will not be nonzero at the same time.",
          "enum": [0, 1, 2, 3],
          "enumDescriptions": [
            "do nothing (default value)",
            "uppercase",
            "lowercase",
            "title case"
          ]
        },
        "fontVariantCaps": {
          "type": "integer",
          "description": "The type of small caps.\n**Note**:\n  `textCase` and `fontVariantCaps` are mutually exclusive. If either item is nonzero, you can ignore the value of the other, as they will not be nonzero at the same time.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "do nothing (default value)",
            "small caps",
            "force small caps, including uppercase characters"
          ]
        },
        "baselineShift": {
          "type": "number",
          "description": "Vertical offset of the text baseline.\nDefault value is `0`."
        },
        "fontVariantPosition": {
          "type": "integer",
          "description": "The position of the text characters.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "normal (default value)",
            "superscript",
            "subscript"
          ]
        },
        "horizontalScale": {
          "type": "number",
          "description": "Scale the text characters horizontally.\nDefault value is `1`.\nValue examples:\n  0.5:  50%\n  1:    not scale\n  1.75: 175%\n  2:    200%"
        },
        "verticalScale": {
          "type": "number",
          "description": "Scale the text characters vertically.\nDefault value is `1`.\nRefer to `horizontalScale` for value examples."
        },
        "rotate": {
          "type": "number",
          "description": "Rotation angle of the text characters.\nDefault value is `0`.",
          "maximum": 180,
          "minimum": -180
        },
        "textParagraph": {
          "$ref": "#/definitions/TextParagraph",
          "description": "The properties of the text paragraph, which are consistent across the same text paragraph."
        },
        "hyperlink": {
          "type": "string",
          "description": "Hyperlink for jump."
        }
      },
      "additionalProperties": false
    },
    "FontVariation": {
      "title": "Font Variation",
      "description": "One key-value pair of font variation.",
      "type": "object",
      "$id": "#FontVariation",
      "required": ["class", "name", "value"],
      "properties": {
        "class": {
          "type": "string",
          "const": "fontVariation"
        },
        "name": {
          "type": "string",
          "description": "The official name of the font variation.\nFor example: \n- `wght` means weight\n- `wdth` means width\n- `slnt` means slant"
        },
        "value": {
          "type": "number",
          "description": "The value of the font variation."
        }
      },
      "additionalProperties": false
    },
    "TextParagraph": {
      "title": "Text Paragraph",
      "description": "The properties of a text paragraph.",
      "type": "object",
      "$id": "#TextParagraph",
      "required": ["class", "paragraphSpacing"],
      "properties": {
        "class": {
          "type": "string",
          "const": "textParagraph"
        },
        "paragraphSpacing": {
          "type": "number",
          "description": "Additional spacing between paragraphs, in addition to line spacing.\nDefault value is `0`."
        }
      },
      "additionalProperties": false
    },
    "TextLineType": {
      "title": "Text Line Type",
      "description": "The properties of a text line within a text list.",
      "type": "object",
      "$id": "#TextLineType",
      "required": ["class", "styleType", "level", "isFirst"],
      "properties": {
        "class": {
          "type": "string",
          "const": "textLineType"
        },
        "styleType": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "plain, not a list",
            "ordered list",
            "unordered list"
          ]
        },
        "level": {
          "type": "integer",
          "description": "The hierarchy level of the text line, starting with `0`(default value)."
        },
        "isFirst": {
          "type": "boolean",
          "description": "Whether the text line is the first line in the text list of the same hierarchy level.\nOnly has meaning for an ordered list."
        }
      },
      "additionalProperties": false
    },
    "Image": {
      "title": "Image",
      "description": "Details of an image.",
      "$id": "#Image",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "contextSettings",
        "id",
        "imageFileName",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "class": {
          "type": "string",
          "const": "image"
        },
        "imageFileName": {
          "type": "string",
          "description": "The path (UTF-8) of the image file."
        },
        "fillReplacesImage": {
          "type": "boolean",
          "description": "If the value is `true`, the image content is not displayed, and only the `fills` effect is shown.\nOtherwise, both the image content and the `fills` effect take effect simultaneously.\nNote: The transparency of the image itself will always take effect.\nDefault value is `false`."
        },
        "imageFilters": {
          "$ref": "#/definitions/ImageFilters",
          "description": "Adjust the colors of the image."
        }
      },
      "additionalProperties": false
    },
    "Group": {
      "title": "Group",
      "description": "A group combines a list of objects, but it is not considered an object itself.\nIn contrast to a frame, a frame is an object that can be rendered and a container that holds objects.\nFor example:\n  The group's fills affect all of its children.\n  The frame's fills affect itself.",
      "$id": "#Group",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "A list of all child objects.\n**Note:** The child object that appears later in the list will be displayed above the one that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "type": "string",
          "const": "group"
        },
        "groupNestMaskType": {
          "type": "boolean",
          "description": "When the group itself is a mask and the group contains a mask, this value affects the valid area of the group as a mask.\n`True`: The mask region of the group is the result after the inner mask.\n`False`: A mask inside a group does not affect the region of the group's mask (default value).\nIf the object does not act as a mask or does not have a mask child inside it, then this property is ignored."
        },
        "isVectorNetwork": {
          "type": "boolean",
          "description": "This field is reserved for `vector-network` compatibility and is only true if `vector-network` is converted to a group.\nDefault value is `false`."
        }
      },
      "additionalProperties": false
    },
    "SymbolInstance": {
      "title": "Symbol Instance",
      "description": "Symbol instance object is an instance of a symbol master which can be overriden.",
      "type": "object",
      "$id": "#SymbolInstance",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "contextSettings",
        "id",
        "isLocked",
        "maskType",
        "masterId",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "overrideValues",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "class": {
          "type": "string",
          "const": "symbolInstance"
        },
        "overrideValues": {
          "type": "array",
          "description": "A list of overridden values.",
          "items": {
            "$ref": "#/definitions/OverrideValue"
          }
        },
        "masterId": {
          "type": "string",
          "description": "The object ID of the symbol master."
        },
        "radius": {
          "type": "array",
          "description": "The radius values correspond to the corners in the following order: left-top, right-top, right-bottom, left-bottom.\nDefault value is `[0, 0, 0, 0]`.",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        },
        "variableAssignments": {
          "type": "array",
          "description": "Reassign the value of the variable defined in symbol master.",
          "items": {
            "$ref": "#/definitions/VariableAssign"
          }
        }
      },
      "additionalProperties": false
    },
    "OverrideValue": {
      "title": "Override Value",
      "description": "Define an individual symbol override.",
      "type": "object",
      "$id": "#OverrideValue",
      "required": ["class", "objectId", "overrideName", "overrideValue"],
      "properties": {
        "class": {
          "type": "string",
          "const": "overrideValue"
        },
        "objectId": {
          "type": "array",
          "description": "A list of IDs or keys that refer to objects, describing an overridden chain. The value of the last object will be overridden. The other objects on the chain are instances.\n**For example**:\nSuppose this array is `[D456, 6516, FB09]`.\nSuppose the current instance (of ID `XXXX`) points to a symbol-master (of ID `C1CF`), which contains a symbol-instance (of ID `D456`).\nAnd this instance (of ID `D456`) points to another symbol-master (of ID `0739`), which contains another symbol-instance (of ID `6516`).\nRecursively, this instance (of ID `6516`) points to yet another symbol-master (of ID `59B5`), which contains the final object (of ID `FB09`).\nSo the current instance (of ID `XXXX`) will override the value of the final object (of ID `FB09`) according to `overrideName` and `overrideValue`.\n**Note**: Each item in the array is associated with the object's `overrideKey` first. If `overrideKey` does not exist, the object's ID is associated.",
          "items": {
            "type": "string"
          }
        },
        "overrideName": {
          "type": "string",
          "description": "Starting with the top-level property of the object, use `.` as a separator.\nIf the property is an array, it contains the index of the array, starting at `0`, and `*` is valid for all items.\nFor example:\n`style`: override whole style.\n`style.fills`: override the `style.fills`.\n`style.fills.0`: override the first item of `style.fills`.\n`style.fills.0.color`: override the color of the first `style.fills`.\n`style.fills.*.color`: override the color of all items in `style.fills`."
        },
        "overrideValue": {
          "description": "The value of the overridden attribute, whose type depends on the concrete property. There are two special cases:\nWhen `overrideName` ends with `style` and `overrideValue` conforms to `referenced_style_<id>`, then it uses the corresponding value in references (top-level attribute).\nWhen the value is `null`, it indicates deletion."
        },
        "effectOnLayout": {
          "type": "boolean",
          "description": "If the value of this property is `true`, the current override applies to the layout.\nDefault value is `false`.\n**Note**: Layout information is defined in `layout.json`, not `design.json`."
        }
      },
      "additionalProperties": false
    },
    "VariableAssign": {
      "title": "Variable Assign",
      "description": "Assign a new value to the variable.",
      "type": "object",
      "$id": "#VariableAssign",
      "required": ["class", "id", "value"],
      "properties": {
        "class": {
          "type": "string",
          "const": "variableAssign"
        },
        "id": {
          "type": "string",
          "description": "The ID of the reassigned variable defined in `VariableDefine`."
        },
        "value": {
          "description": "The new value of the variable."
        }
      },
      "additionalProperties": false
    },
    "SymbolMaster": {
      "title": "Symbol Master",
      "description": "A symbol master is a reusable object that contains a group of objects.",
      "$id": "#SymbolMaster",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "A list of all child objects.\n**Note:** The child object that appears later in the list will be displayed above the one that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "type": "string",
          "const": "symbolMaster"
        },
        "radius": {
          "type": "array",
          "description": "The radius values correspond to the corners in the following order: left-top, right-top, right-bottom, left-bottom.\nDefault value is `[0, 0, 0, 0]`.",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        }
      },
      "additionalProperties": false
    },
    "ReferencedStyle": {
      "title": "Referenced style",
      "type": "object",
      "$id": "#ReferencedStyle",
      "required": ["class", "id", "style"],
      "properties": {
        "class": {
          "type": "string",
          "const": "referencedStyle"
        },
        "id": {
          "type": "string",
          "description": "ID of the referenced style, globally unique."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The style attributes."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations."
        },
        "fontAttr": {
          "$ref": "#/definitions/FontAttr",
          "description": "Font attributes only affect for text objects."
        }
      },
      "additionalProperties": false
    },
    "PatternLayerDef": {
      "title": "Pattern Layer Def",
      "description": "Contains objects to define a global pattern.",
      "$id": "#PatternLayerDef",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "patternBoundingBox",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object, globally unique."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, for user identification, encoded in UTF-8."
        },
        "isLocked": {
          "type": "boolean",
          "description": "If `true`, the object will be unable to be edited."
        },
        "visible": {
          "type": "boolean",
          "description": "If `false`, the object will be invisible."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "The opacity and blending-related configurations of the object."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "The borders, fills, and other styles of the object."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "The bounds of the object before undergoing matrix transformations."
        },
        "transformedBounds": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix used for translating, rotating, and scaling the object."
        },
        "alphaMaskBy": {
          "type": "array",
          "description": "A list of alpha masks applied to the object.",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "A list of outline masks applied to the object, clipped by the intersection of their outlines.\nThe items in the list are object IDs of the masks.",
          "items": {
            "type": "string"
          }
        },
        "maskType": {
          "type": "integer",
          "description": "The mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not a mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "description": "How the `style` and `visible` of the mask object affect the area of the mask.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The `style` and `visible` of the mask object do not affect the area of the mask, which depends on its bounds.",
            "The `style` of the mask object does not affect the area of the mask, while the `visible` does.",
            "The `style` and `visible` of the mask object do affect the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "How the mask object is displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depend on its `style`. (Default value for `outline mask`.)",
            "only display its bounds. (Default value for `alpha mask` when its `alphaType` equals `0`.)",
            "do not display. (Default value for other conditions.)"
          ]
        },
        "overflow": {
          "description": "How to display the child element of the object when it overflows its container.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden. Anything outside the scope of the container will be cropped and invisible.",
            "visible. Contents outside the scope of the container will not be cropped and will be visible.",
            "scrolled. Content that is outside the container's scope is cropped, and a scrollbar is displayed to view the content that is beyond the container's boundaries."
          ]
        },
        "cornerSmoothing": {
          "type": "number",
          "description": "Smoothness of rounded corners. Range: `[0, 1]`.\n`0` is the default value, indicating no smoothing for rounded corners."
        },
        "overrideKey": {
          "type": "string",
          "description": "Used to be associated with the object by symbol instances for overriding its attributes. Check the `objectId` in the `OverrideValue` for details.\nIf `overrideKey` exists, find a symbol master through upward traversal (which could be the object itself); `overrideKey` is unique within the symbol master."
        },
        "horizontalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Horizontal constraints for the object.\nDefault value is `1`."
        },
        "verticalConstraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Vertical constraints for the object.\nDefault value is `1`."
        },
        "resizesContent": {
          "type": "integer",
          "description": "How child objects behave when the object is resized.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "If the current object contains children (suitable for paths with boolean operations), the current object serves as the starting point. For each child, if the object chain includes a frame or symbol without a layout, the constraints on the child object are applied (ignoring constraints for groups and top-level paths with boolean operations). Otherwise, scaling is applied.",
            "Force child objects to have fixed positions and sizes.",
            "Apply child object constraints. (Default value.)"
          ]
        },
        "keepShapeWhenResize": {
          "type": "boolean",
          "description": "`False`: When resizing occurs, the object scales according to the `horizontalConstraint` and `verticalConstraint`. (Default value.)\n`True`: When resizing occurs, the object itself maintains its angle, and the center position is scaled. The scaling occurs along both the length and width directions."
        },
        "variableDefs": {
          "type": "array",
          "description": "A list of variables that can be used by children.",
          "items": {
            "$ref": "#/definitions/VariableDef"
          }
        },
        "variableRefs": {
          "type": "array",
          "description": "A list of referenced variables.",
          "items": {
            "$ref": "#/definitions/VariableRef"
          }
        },
        "styleEffectBoolean": {
          "type": "integer",
          "description": "How the `style` of the object affects the region participating in a Boolean operation with another object.",
          "enum": [0, 1],
          "enumDescriptions": [
            "ignore style(default value): The region in which an object participates in a Boolean operation is independent of its `style`.",
            " If the object is a path and the path has `borders` without `fills`, then the `borders` will be used as a region to participate in the Boolean operation calculation. If the object is a text and the text has `borders` without `fills`, then the object will be ignored during the Boolean operation. In other cases, it behaves the same as `ignore style`. "
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "A list of all child objects.\n**Note:** The child object that appears later in the list will be displayed above the one that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "type": "string",
          "const": "patternLayerDef"
        },
        "patternBoundingBox": {
          "type": "array",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        }
      },
      "additionalProperties": false
    }
  },
  "required": ["version", "fileType", "frames"],
  "properties": {
    "version": {
      "type": "string",
      "const": "1.0.19",
      "description": "Current VGG specs version, conforming to semantic version format like `major.minor.patch`.\n"
    },
    "fileType": {
      "type": "integer",
      "description": "The file type of current file.",
      "enum": [0, 1, 3, 4],
      "enumDescriptions": ["Unknown", "Sketch", "Figma", "Adobe Illustrator"]
    },
    "fileName": {
      "type": "string",
      "description": "The file name of the input design file, encoding in UTF-8."
    },
    "frames": {
      "type": "array",
      "description": "A list of the frames.",
      "items": {
        "$ref": "#/definitions/Frame"
      }
    },
    "references": {
      "type": "array",
      "description": "A list of the referenced resources.",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/ReferencedStyle"
          },
          {
            "$ref": "#/definitions/SymbolMaster"
          }
        ]
      }
    },
    "patternLayerDef": {
      "type": "array",
      "description": "Illustrator-specific pattern definitions.",
      "items": {
        "$ref": "#/definitions/PatternLayerDef"
      }
    }
  },
  "additionalProperties": false
}
