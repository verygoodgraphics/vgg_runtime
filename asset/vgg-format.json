{
  "title": "Daruma Design Format",
  "description": "Daruma Design Format is a JSON-based format for describing the content of various design pieces.",
  "type": "object",
  "$id": "https://git.vgg.cool/verygoodgraphics/vgg_format/src/branch/master/sketch-document-6.4.0/packages/file-format/src/vgg-format.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Frame": {
      "title": "Frame",
      "description": " The frame itself is a object that can be rendered and a container that can contain other objects. In contrast to a group, a group is simply a collection of objects. For example:  The group's fill acts on all of its children. The frame's fill acts on itself. ",
      "$id": "#Frame",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "frame",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "Describes all child object information. The child item that appears later will be above the child item that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "const": "frame"
        },
        "radius": {
          "type": "array",
          "description": " The radius of the four corners. [left-top, right-top, right-bottom, left-bottom] default value: [0, 0, 0, 0] "
        }
      },
      "additionalProperties": false
    },
    "GraphicsContextSettings": {
      "title": "Graphics Context Settings",
      "description": "Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.",
      "type": "object",
      "$id": "#GraphicsContextSettings",
      "required": [
        "class",
        "blendMode",
        "opacity",
        "isolateBlending",
        "transparencyKnockoutGroup"
      ],
      "properties": {
        "class": {
          "const": "graphicsContextSettings"
        },
        "blendMode": {
          "$ref": "#/definitions/BlendMode"
        },
        "opacity": {
          "$ref": "#/definitions/UnitInterval"
        },
        "isolateBlending": {
          "type": "boolean",
          "description": "You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected."
        },
        "transparencyKnockoutGroup": {
          "type": "integer",
          "description": "In a transparency knockout group, the elements of a group don't show through each other.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["OFF", "ON", "Neutral"]
        }
      },
      "additionalProperties": false
    },
    "BlendMode": {
      "title": "Blend Mode",
      "description": "Blend mode of the object.",
      "type": "integer",
      "enum": [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29
      ],
      "enumDescriptions": [
        "Normal",
        "Darken",
        "Multiply",
        "Color burn",
        "Lighten",
        "Screen",
        "Color dodge",
        "Overlay",
        "Soft light",
        "Hard light",
        "Difference",
        "Exclusion",
        "Hue",
        "Saturation",
        "Color",
        "Luminosity",
        "Plus darker",
        "Plus lighter",
        "Blend divide",
        "Blend subtraction",
        "Darker color",
        "Dissolve",
        "Hard mix",
        "Lighter color",
        "Lighten burn",
        "Lighten dodge",
        "Lighten light",
        "Pass through",
        "Pin Light",
        "Vivid light"
      ],
      "$id": "#BlendMode"
    },
    "UnitInterval": {
      "title": "Unit Interval",
      "description": "Encode normalised scalar values, for example RGB color components.",
      "type": "number",
      "minimum": 0,
      "maximum": 1,
      "$id": "#UnitInterval"
    },
    "Style": {
      "title": "Style",
      "description": "Defines a object style.",
      "type": "object",
      "$id": "#Style",
      "required": ["class", "borders", "fills", "blurs", "shadows"],
      "properties": {
        "class": {
          "const": "style"
        },
        "borders": {
          "type": "array",
          "description": "An array containing the border styles of the object.",
          "items": {
            "$ref": "#/definitions/Border"
          }
        },
        "fills": {
          "type": "array",
          "description": "An array containing the fill effects of the object.",
          "items": {
            "$ref": "#/definitions/Fill"
          }
        },
        "blurs": {
          "type": "array",
          "description": "An array containing the blur effects of the object.",
          "items": {
            "$ref": "#/definitions/Blur"
          }
        },
        "shadows": {
          "type": "array",
          "description": "An array containing the shadow effects of the object.",
          "items": {
            "$ref": "#/definitions/Shadow"
          }
        }
      },
      "additionalProperties": false
    },
    "Border": {
      "title": "Border",
      "description": "Defines a border style",
      "type": "object",
      "$id": "#Border",
      "required": [
        "class",
        "isEnabled",
        "fillType",
        "position",
        "thickness",
        "contextSettings",
        "style",
        "dashedPattern",
        "dashedOffset",
        "lineCapStyle",
        "lineJoinStyle",
        "miterLimit",
        "flat"
      ],
      "properties": {
        "class": {
          "const": "border"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "fillType": {
          "$ref": "#/definitions/FillType"
        },
        "position": {
          "$ref": "#/definitions/BorderPosition"
        },
        "thickness": {
          "type": "number",
          "description": "Thickness of the border. A line width of 0 is acceptable, this is interpreted as the thinnest line width that can be rendered at device resolution."
        },
        "customTickness": {
          "type": "array",
          "description": "Specifies the tickness of the four sides of the rectangle. [left, top, right, bottom]. Higher priority than \"thickness\".",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings"
        },
        "gradient": {
          "$ref": "#/definitions/Gradient"
        },
        "pattern": {
          "$ref": "#/definitions/Pattern"
        },
        "style": {
          "type": "integer",
          "description": "Type of the border style, the dashed style is further specified in dashedOffset and dashedPattern.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["solid", "dotted", "dashed"]
        },
        "dashedPattern": {
          "type": "array",
          "description": "A set of alternating dashes (filled regions) and gaps (empty regions). (applies to 'dashed' borders)",
          "items": {
            "type": "number"
          }
        },
        "dashedOffset": {
          "type": "number",
          "descript": "Border dash initial offset. (applies to 'dashed' borders)"
        },
        "lineCapStyle": {
          "$ref": "#/definitions/LineCapStyle"
        },
        "startMarkerType": {
          "$ref": "#/definitions/MarkerType"
        },
        "endMarkerType": {
          "$ref": "#/definitions/MarkerType"
        },
        "lineJoinStyle": {
          "$ref": "#/definitions/LineJoinStyle"
        },
        "miterLimit": {
          "type": "number",
          "descript": "A value limiting the extension of a sharp tip created by adjacent border segments using 'miter' join."
        },
        "flat": {
          "type": "number",
          "descript": "equivalent to the PostScript language setflat operator, which sets the flatness parameter in the graphics state. The flatness parameter specifies the accuracy or smoothness with which curves are rendered as a sequence of flat line segments.",
          "maximum": 100,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "Color": {
      "title": "Color",
      "description": "Defines a RGBA color value.",
      "type": "object",
      "$id": "#Color",
      "required": ["class", "alpha", "red", "green", "blue"],
      "properties": {
        "class": {
          "const": "color"
        },
        "alpha": {
          "$ref": "#/definitions/UnitInterval"
        },
        "red": {
          "$ref": "#/definitions/UnitInterval"
        },
        "green": {
          "$ref": "#/definitions/UnitInterval"
        },
        "blue": {
          "$ref": "#/definitions/UnitInterval"
        }
      },
      "additionalProperties": false
    },
    "FillType": {
      "title": "Fill Type",
      "type": "integer",
      "description": "Enumeration of the fill types.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["Color", "Gradient", "Pattern"],
      "$id": "#FillType"
    },
    "BorderPosition": {
      "title": "Border Position",
      "type": "integer",
      "description": "Enumeration of border positions.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["Center", "Inside", "Outside"],
      "$id": "#BorderPosition"
    },
    "Gradient": {
      "title": "Gradient",
      "description": "Defines a gradient.",
      "type": "object",
      "$id": "#Gradient",
      "required": ["class", "instance"],
      "properties": {
        "class": {
          "const": "gradient"
        },
        "instance": {
          "description": "The current gradient instance.",
          "oneOf": [
            {
              "$ref": "#/definitions/GradientAngular"
            },
            {
              "$ref": "#/definitions/GradientLinear"
            },
            {
              "$ref": "#/definitions/GradientRadial"
            },
            {
              "$ref": "#/definitions/GradientDiamond"
            },
            {
              "$ref": "#/definitions/GradientBasic"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "GradientAngular": {
      "title": "Gradient Angular",
      "description": "Described parameters required by gradient angular.",
      "type": "object",
      "$id": "#GradientAngular",
      "required": ["class", "from", "to", "stops", "invert", "elipseLength"],
      "properties": {
        "class": {
          "const": "gradientAngular"
        },
        "from": {
          "$ref": "#/definitions/Point"
        },
        "to": {
          "$ref": "#/definitions/Point"
        },
        "stops": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "invert": {
          "type": "boolean",
          "description": "Flag describing if gradient has been inverted."
        },
        "elipseLength": {
          "type": "number",
          "description": "For elliptic gradients describes ratio of major to minor semi-axis of the ellipse."
        }
      },
      "additionalProperties": false
    },
    "Point": {
      "title": "Point",
      "description": "An array holds two elements, The first term is x, the second term is y.",
      "type": "array",
      "maxItems": 2,
      "minItems": 2,
      "$id": "#Point",
      "items": {
        "type": "number"
      }
    },
    "GradientStop": {
      "title": "Gradient Stop",
      "description": "Defines a position on a gradient that marks the end of a transition to a new color.",
      "type": "object",
      "$id": "#GradientStop",
      "required": ["class", "color", "position", "midPoint"],
      "properties": {
        "class": {
          "const": "gradientStop"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "position": {
          "$ref": "#/definitions/UnitInterval",
          "description": "A number giving the position of a color stop on the gradient ramp."
        },
        "midPoint": {
          "$ref": "#/definitions/UnitInterval",
          "description": "Specifies the location between two ramp points where there is an equal mix of the two colors. midPoint is a percentage of the distance between two ramp points. The mid point for the last color stop is ignored."
        }
      },
      "additionalProperties": false
    },
    "GradientLinear": {
      "title": "Gradient Linear",
      "description": "Described parameters required by gradient linear.",
      "type": "object",
      "$id": "#GradientLinear",
      "required": ["class", "from", "to", "stops", "invert"],
      "properties": {
        "class": {
          "const": "gradientLinear"
        },
        "from": {
          "$ref": "#/definitions/Point"
        },
        "to": {
          "$ref": "#/definitions/Point"
        },
        "stops": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "invert": {
          "type": "boolean",
          "description": "Flag describing if gradient has been inverted."
        }
      },
      "additionalProperties": false
    },
    "GradientRadial": {
      "title": "Gradient Radial",
      "description": "Described parameters required by gradient radial.",
      "type": "object",
      "$id": "#GradientRadial",
      "required": ["class", "from", "to", "stops", "invert", "elipseLength"],
      "properties": {
        "class": {
          "const": "gradientRadial"
        },
        "from": {
          "$ref": "#/definitions/Point"
        },
        "to": {
          "$ref": "#/definitions/Point"
        },
        "stops": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "invert": {
          "type": "boolean",
          "description": "Flag describing if gradient has been inverted."
        },
        "elipseLength": {
          "type": "number",
          "description": "For elliptic gradients describes ratio of major to minor semi-axis of the ellipse."
        }
      },
      "additionalProperties": false
    },
    "GradientDiamond": {
      "title": "Gradient Diamond",
      "description": "Described parameters required by gradient diamond.",
      "type": "object",
      "$id": "#GradientDiamond",
      "required": ["class", "from", "to", "stops", "invert", "elipseLength"],
      "properties": {
        "class": {
          "const": "gradientDiamond"
        },
        "from": {
          "$ref": "#/definitions/Point"
        },
        "to": {
          "$ref": "#/definitions/Point"
        },
        "stops": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "invert": {
          "type": "boolean",
          "description": "Flag describing if gradient has been inverted."
        },
        "elipseLength": {
          "type": "number",
          "description": "For elliptic gradients describes ratio of major to minor semi-axis of the ellipse."
        }
      },
      "additionalProperties": false
    },
    "GradientBasic": {
      "title": "Gradient Basic",
      "description": "Describes the parameters of gradients in a more basic form.",
      "type": "object",
      "$id": "#GradientBasic",
      "required": ["class", "gradientType", "stops", "invert", "geometry"],
      "properties": {
        "class": {
          "const": "gradientBasic"
        },
        "gradientType": {
          "type": "integer",
          "enum": [0, 1],
          "enumDescriptions": ["linear gradient", "radial gradient"]
        },
        "stops": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/GradientStop"
          }
        },
        "invert": {
          "type": "boolean",
          "description": "Flag describing if gradient has been inverted."
        },
        "geometry": {
          "$ref": "#/definitions/GradientBasicGeometry",
          "description": "The meaning of the gradient vector is different for radial gradients than for linear gradients. The vector origin is the center of the circle containing the radial gradient; the vector length is the radius of the that circle. The vector angle is not used by radial blends, but is preserved and used if the user changes the gradient from radial to linear."
        },
        "hilight": {
          "$ref": "#/definitions/GradientHilight",
          "description": "Only exists in radial mode."
        },
        "overallMatrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Its parameters are six floating point values, which describe the overall matrix applied to the gradient."
        },
        "perpendicularMatrix": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["flag", "matrix"],
            "properties": {
              "flag": {
                "type": "integer",
                "enum": [0, 1],
                "enumDescriptions": [
                  "specifies a gradient fill between two colors.",
                  "specifies solid colors at either end of a linear gradient fill, known as gradient caps.It doesn't exist in radial gradient."
                ]
              },
              "matrix": {
                "$ref": "#/definitions/Matrix"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "GradientBasicGeometry": {
      "title": "Gradient basic geometry",
      "description": "Gradient geometry defines much of the appearance of the gradient within the path.",
      "type": "object",
      "$id": "#GradientBasicGeometry",
      "required": [
        "class",
        "flag",
        "xOrigin",
        "yOrigin",
        "angle",
        "length",
        "matrix",
        "widthRatio"
      ],
      "properties": {
        "class": {
          "const": "gradientBasicGeometry"
        },
        "flag": {
          "type": "integer",
          "description": "This argument defines how the gradient will be rendered.For simple filled paths, flag takes the value 1.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "Do not issue a clip.",
            "Issue a clip.",
            "Disable rendering."
          ]
        },
        "xOrigin": {
          "type": "number",
          "description": "xOrigin and yOrigin give the origin of the gradient in page coordinates. The origin can be located anywhere on the artwork, and corresponds to 0 on the gradient ramp."
        },
        "yOrigin": {
          "type": "number",
          "description": "Refer to xOriginal for details."
        },
        "angle": {
          "type": "number",
          "description": "This argument specifies the direction of the gradient vector, in degrees. The gradient ramp extends from the origin at the value of angle, which is measured counterclockwise from the x axis."
        },
        "length": {
          "type": "number",
          "description": "This argument specifies the distance over which the gradient ramp is applied. The ramp will be scaled so that its 100% value is the end of the length. This parameter may be greater than 1."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "The six values make up a transformation matrix. When a gradient is first applied to an object, these values are the identity matrix. If the user transforms the object, the user transformation matrix is concatenated to the gradient instance’s matrix."
        },
        "widthRatio": {
          "type": "number",
          "description": "0.5 Indicates that the width is half the length. 2 Indicates that the width is twice the length. and so on."
        }
      },
      "additionalProperties": false
    },
    "Matrix": {
      "title": "Matrix",
      "description": "a b c d tx ty",
      "type": "array",
      "maxItems": 6,
      "minItems": 6,
      "$id": "#Matrix",
      "items": {
        "type": "number"
      }
    },
    "GradientHilight": {
      "title": "Gradient Hilight",
      "description": "Radial gradients have an additional attribute called a hilight. The hilight serves at the starting point for the gradient ramp as it expands outward. It is still contained within the gradient vector circle.",
      "type": "object",
      "$id": "#GradientHilight",
      "required": ["class", "xHilight", "yHilight", "angle", "length"],
      "properties": {
        "class": {
          "const": "gradientHilight"
        },
        "xHilight": {
          "type": "number",
          "description": "xHilight and yHilight specify the hilight placement, in x and y offsets from the gradient vector origin."
        },
        "yHilight": {
          "type": "number",
          "description": "Refer to xHilight for details."
        },
        "angle": {
          "type": "number",
          "description": "This argument is the angle (in degrees) to the hilight point, measured counterclockwise from the x axis."
        },
        "length": {
          "$ref": "#/definitions/UnitInterval",
          "description": "This argument is the distance of the hilight from the origin, expressed as a fraction of the radius—a value between 0 and 1."
        }
      },
      "additionalProperties": false
    },
    "Pattern": {
      "title": "Pattern",
      "description": "Pattern descriptor.",
      "type": "object",
      "$id": "#Pattern",
      "required": ["class", "instance"],
      "properties": {
        "class": {
          "const": "pattern"
        },
        "instance": {
          "oneOf": [
            {
              "$ref": "#/definitions/PatternImage"
            },
            {
              "$ref": "#/definitions/PatternLayerInstance"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PatternImage": {
      "title": "Pattern Image",
      "description": "Use an image as the content of pattern.",
      "type": "object",
      "$id": "#PatternImage",
      "required": [
        "class",
        "fillType",
        "imageTileMirrored",
        "imageFileName",
        "matrix"
      ],
      "properties": {
        "class": {
          "const": "patternImage"
        },
        "fillType": {
          "$ref": "#/definitions/PatternFillType"
        },
        "imageTileMirrored": {
          "type": "boolean",
          "description": "Whether to mirror the image. Only available for tiles."
        },
        "imageFileName": {
          "type": "string",
          "description": "image filename."
        },
        "matrix": {
          "description": "Image matrix.",
          "$ref": "#/definitions/Matrix"
        },
        "imageAdjust": {
          "$ref": "#/definitions/ImageAdjust"
        }
      },
      "additionalProperties": false
    },
    "PatternFillType": {
      "title": "Pattern Fill Type",
      "type": "integer",
      "description": "Enumeration of pattern fill types.",
      "enum": [0, 1, 2, 3, 4, 5],
      "enumDescriptions": [
        "Tile",
        "Fill",
        "Stretch",
        "Fit",
        "Tile only horizontal",
        "Tile only vertical"
      ],
      "$id": "#PatternFillType"
    },
    "ImageAdjust": {
      "title": "Image Adjust",
      "description": "Defines color adjust styles on images.",
      "type": "object",
      "$id": "#ImageAdjust",
      "required": ["class", "instance"],
      "properties": {
        "class": {
          "const": "imageAdjust"
        },
        "instance": {
          "oneOf": [
            {
              "$ref": "#/definitions/ColorControls"
            },
            {
              "$ref": "#/definitions/ImageFilters"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColorControls": {
      "title": "Color Controls",
      "description": "Defines color adjust styles on images",
      "type": "object",
      "$id": "#ColorControls",
      "required": [
        "class",
        "isEnabled",
        "brightness",
        "contrast",
        "hue",
        "saturation"
      ],
      "properties": {
        "class": {
          "const": "colorControls"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "brightness": {
          "type": "number",
          "minimum": -100,
          "maximum": 100
        },
        "contrast": {
          "type": "number",
          "minimum": -100,
          "maximum": 100
        },
        "hue": {
          "type": "number",
          "minimum": -100,
          "maximum": 100
        },
        "saturation": {
          "type": "number",
          "minimum": -100,
          "maximum": 100
        }
      },
      "additionalProperties": false
    },
    "ImageFilters": {
      "title": "Image Filters",
      "description": "Defines the image filters applied to an image paint.",
      "type": "object",
      "$id": "#ImageFilters",
      "required": [
        "class",
        "isEnabled",
        "exposure",
        "contrast",
        "saturation",
        "temperature",
        "tint",
        "highlights",
        "shadows"
      ],
      "properties": {
        "class": {
          "const": "imageFilter"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "exposure": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "contrast": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "saturation": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "temperature": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "tint": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "highlights": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        },
        "shadows": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        }
      },
      "additionalProperties": false
    },
    "PatternLayerInstance": {
      "title": "Pattern layer",
      "description": "Use an layer as the content of pattern.",
      "type": "object",
      "$id": "#PatternLayerInstance",
      "required": [
        "class",
        "refLayerName",
        "offset",
        "scale",
        "angle",
        "reflection",
        "r",
        "shear",
        "shearAxis",
        "matrix"
      ],
      "properties": {
        "class": {
          "const": "patternLayer"
        },
        "refLayerName": {
          "type": "string",
          "description": "The name(utf-8) of the referenced pattern layer. Note that this is the name of the pattern layer, not its id. The pattern layer name is unique."
        },
        "offset": {
          "$ref": "#/definitions/Point",
          "description": "Specify the offset from the ruler origin of the origin to be used for tiling the pattern. Each distance specified in points."
        },
        "scale": {
          "$ref": "#/definitions/Point",
          "description": "Specify the scale factors to be applied to the x and y dimensions, respectively, of the pattern."
        },
        "angle": {
          "type": "number",
          "description": "Specifies the angle in counterclockwise degrees to rotate the pattern."
        },
        "reflection": {
          "type": "boolean",
          "description": "Flag indicating whether to apply a reflection to the pattern."
        },
        "r": {
          "type": "number",
          "description": "Specifies the angle of the line from the origin about which the pattern is reflected. Used if the reflection operand is true."
        },
        "shear": {
          "type": "number",
          "description": "Specifies the shear angle."
        },
        "shearAxis": {
          "type": "number",
          "description": "Specifies the shear axis."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Specifies the initial matrix to which all other pattern transformations are to be applied. This matrix describes transformations that are not otherwise expressible as the single combination of the other transformations."
        }
      },
      "additionalProperties": false
    },
    "LineCapStyle": {
      "title": "Line Cap Style",
      "type": "integer",
      "description": "Enumeration of the line cap styles.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["Butt", "Round", "Square"],
      "$id": "#LineCapStyle"
    },
    "MarkerType": {
      "title": "Marker Type",
      "description": "Enumeration of the possible types of vector line endings",
      "type": "integer",
      "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      "enumDescriptions": [
        "None",
        "Open arrow",
        "Filled arrow",
        "Line",
        "Open circle",
        "Filled circle",
        "Open square",
        "Filled square",
        "Reversed triangle",
        "Diamond arrow",
        "Round",
        "Square"
      ],
      "$id": "#MarkerType"
    },
    "LineJoinStyle": {
      "title": "Line Join Style",
      "type": "integer",
      "description": "Enumeration of the line join styles.",
      "enum": [0, 1, 2],
      "enumDescriptions": ["Miter", "Round", "Bevel"],
      "$id": "#LineJoinStyle"
    },
    "Fill": {
      "title": "Fill",
      "description": "Defines a fill style.",
      "type": "object",
      "$id": "#Fill",
      "required": ["class", "isEnabled", "fillType", "contextSettings"],
      "properties": {
        "class": {
          "const": "fill"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "fillType": {
          "$ref": "#/definitions/FillType"
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings"
        },
        "gradient": {
          "$ref": "#/definitions/Gradient"
        },
        "pattern": {
          "$ref": "#/definitions/Pattern"
        }
      },
      "additionalProperties": false
    },
    "Blur": {
      "title": "Blur",
      "description": "Defines a blur style.",
      "type": "object",
      "$id": "#Blur",
      "required": ["class", "type", "isEnabled", "center", "saturation"],
      "properties": {
        "class": {
          "const": "blur"
        },
        "type": {
          "$ref": "#/definitions/BlurType"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "radius": {
          "type": "number",
          "description": "Blur radius."
        },
        "motionAngle": {
          "type": "number",
          "description": "Motion blur angle (in degrees)."
        },
        "center": {
          "$ref": "#/definitions/Point",
          "description": "The center of the zoom blur."
        },
        "saturation": {
          "type": "number",
          "description": "For background blur."
        }
      },
      "additionalProperties": false
    },
    "BlurType": {
      "title": "Blur Type",
      "description": "Enumeration of the various blur types.",
      "type": "integer",
      "enum": [0, 1, 2, 3],
      "enumDescriptions": ["Gaussian", "Motion", "Zoom", "Background"],
      "$id": "#BlurType"
    },
    "Shadow": {
      "title": "Shadow",
      "description": "Defines a shadow style",
      "type": "object",
      "$id": "#Shadow",
      "required": [
        "class",
        "isEnabled",
        "color",
        "offsetX",
        "offsetY",
        "blur",
        "spread",
        "contextSettings",
        "inner"
      ],
      "properties": {
        "class": {
          "const": "shadow"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "The color of the shadow."
        },
        "offsetX": {
          "type": "number",
          "description": "Horizontal offset of the shadow."
        },
        "offsetY": {
          "type": "number",
          "description": "Vertical offset of the shadow."
        },
        "blur": {
          "type": "number",
          "description": "Blur value of the shadow."
        },
        "spread": {
          "type": "number",
          "description": "Spread amount of the shadow contour."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings"
        },
        "inner": {
          "type": "boolean",
          "description": "True means inner shadows. False means shadows."
        },
        "showBehindTransparentAreas": {
          "type": "boolean",
          "description": " When the object itself has a transparent fill, if the object has a shadow(not inner shadow), whether the shadow can be seen through the object itself. (default false) "
        }
      },
      "additionalProperties": false
    },
    "Rect": {
      "title": "Rect",
      "description": "Defines an abstract rectangle.",
      "type": "object",
      "$id": "#Rect",
      "required": [
        "class",
        "constrainProportions",
        "height",
        "width",
        "x",
        "y"
      ],
      "properties": {
        "class": {
          "const": "rect"
        },
        "constrainProportions": {
          "type": "boolean",
          "description": "Whether to keep the height and width ratio constant while scaling."
        },
        "height": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "x": {
          "type": "number",
          "description": "Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right."
        },
        "y": {
          "type": "number",
          "description": "Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up."
        }
      },
      "additionalProperties": false
    },
    "AlphaMask": {
      "title": "Alpha Mask",
      "type": "object",
      "description": "Describes the properties of the alpha mask.",
      "$id": "#AlphaMask",
      "required": ["class", "id", "alphaType", "crop"],
      "properties": {
        "class": {
          "const": "alphaMask"
        },
        "id": {
          "type": "string",
          "description": "The value is ID of a object that is a alpha mask of this object."
        },
        "alphaType": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": ["alpha", "luminosity", "inverse-luminosity"]
        },
        "crop": {
          "type": "boolean",
          "description": "Crops the masked object to the boundaries of the masking object."
        }
      },
      "additionalProperties": false
    },
    "Path": {
      "title": "Path",
      "description": "Path represents a vector geometry which is formed by individual subpaths combined together via boolean operations.",
      "$id": "#Path",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "contextSettings",
        "frame",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "shape",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "class": {
          "const": "path"
        },
        "pathType": {
          "type": "integer",
          "description": "The type of path is described.",
          "enum": [0, 1, 2, 3, 4, 5, 6],
          "enumDescriptions": [
            "rectangle",
            "line",
            "arrow",
            "ellipse",
            "polygon",
            "star",
            "vector"
          ]
        },
        "shape": {
          "$ref": "#/definitions/Shape",
          "description": "Specifies shape of the path."
        }
      },
      "additionalProperties": false
    },
    "Shape": {
      "title": "Shape",
      "description": "Shape descriptor.",
      "type": "object",
      "$id": "#Shape",
      "required": ["class", "subshapes", "windingRule"],
      "properties": {
        "class": {
          "const": "shape"
        },
        "subshapes": {
          "type": "array",
          "description": "An array of subshape in the shape.",
          "items": {
            "$ref": "#/definitions/SubShape"
          }
        },
        "windingRule": {
          "type": "integer",
          "description": "The value describes the shape's 'winding rule' (policy determining how overlapping contours fill an area).",
          "enum": [0, 1],
          "enumDescriptions": ["non-zero", "even-odd"]
        }
      },
      "additionalProperties": false
    },
    "SubShape": {
      "title": "Subshape",
      "description": "A single subshape descriptor.",
      "type": "object",
      "$id": "#SubShape",
      "required": ["class", "subGeometry", "booleanOperation"],
      "properties": {
        "class": {
          "const": "subshape"
        },
        "subGeometry": {
          "description": "The contour of the subpath is described. When the frame and symbol-instance and symbol-master are in subGeometry, only the childObjects will be used, and the bounding box will not be used. Any mask nested within this object will be invalidated.",
          "oneOf": [
            {
              "$ref": "#/definitions/Contour"
            },
            {
              "$ref": "#/definitions/Text"
            },
            {
              "$ref": "#/definitions/Image"
            },
            {
              "$ref": "#/definitions/Path"
            },
            {
              "$ref": "#/definitions/Group"
            },
            {
              "$ref": "#/definitions/SymbolMaster"
            },
            {
              "$ref": "#/definitions/SymbolInstance"
            },
            {
              "$ref": "#/definitions/Frame"
            }
          ]
        },
        "booleanOperation": {
          "type": "integer",
          "description": "Boolean operation combining this and before-in-the-array path.",
          "enum": [0, 1, 2, 3, 4],
          "enumDescriptions": [
            "union",
            "subtraction",
            "intersecion",
            "exclusion",
            "none"
          ]
        }
      },
      "additionalProperties": false
    },
    "Contour": {
      "title": "Contour",
      "description": "Describes the contour of a shape.",
      "type": "object",
      "$id": "#Contour",
      "required": ["class", "closed", "points"],
      "properties": {
        "class": {
          "const": "contour"
        },
        "closed": {
          "type": "boolean",
          "description": "Describes if the path is opened or closed."
        },
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PointAttr"
          }
        }
      },
      "additionalProperties": false
    },
    "PointAttr": {
      "title": "Point Attr",
      "description": "A single point descriptor.",
      "type": "object",
      "$id": "#PointAttr",
      "required": ["class", "point"],
      "properties": {
        "class": {
          "const": "pointAttr"
        },
        "radius": {
          "type": "number",
          "description": "Corner radius at the point."
        },
        "cornerStyle": {
          "type": "integer",
          "description": "Enumeration of the corner styles that can be applied to vector points.",
          "enum": [0, 1, 2, 3],
          "enumDescriptions": [
            "Rounded",
            "RoundedInverted",
            "Angled",
            "Squared"
          ]
        },
        "curveFrom": {
          "$ref": "#/definitions/Point",
          "description": "When the current point is the starting point of the Bezier curve, this attribute describes the control point at the starting point of the Bezier curve."
        },
        "curveTo": {
          "$ref": "#/definitions/Point",
          "description": "When the current point is the end point of the Bezier curve, this attribute describes the control point of the Bezier curve's end point."
        },
        "point": {
          "$ref": "#/definitions/Point",
          "description": "The actual point on the curve. The coordinates are before the matrix transformation."
        }
      },
      "additionalProperties": false
    },
    "Text": {
      "title": "Text",
      "description": "Contains the information needed to draw the text.",
      "$id": "#Text",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "attr",
        "bounds",
        "class",
        "content",
        "contextSettings",
        "frame",
        "frameMode",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "verticalAlignment",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "class": {
          "const": "text"
        },
        "content": {
          "type": "string",
          "description": "Text content of the text object. The encoding format is utf-8."
        },
        "textOnPath": {
          "$ref": "#/definitions/TextOnPath",
          "description": "If this item exists, the text is on the path."
        },
        "frameMode": {
          "type": "integer",
          "description": "Specifies the text frame semantics. fixed mode strictly sets the typeset area according to the frame. auto width and auto height mode expands associated bounds as needed.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["fixed", "auto width", "auto height"]
        },
        "truncatedHeight": {
          "type": "number",
          "description": "Text truncation height. omit represents no such attribute."
        },
        "verticalAlignment": {
          "type": "integer",
          "description": "Text vertical alignment.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["top", "center", "bottom"]
        },
        "attr": {
          "type": "array",
          "description": "An array containing font style ranges. Note: Arrays are ordered.",
          "items": {
            "$ref": "#/definitions/FontAttr"
          }
        },
        "lineType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineType"
          }
        },
        "verticalTrim": {
          "type": "boolean",
          "description": " True: cap height to baseline. False: do nothing.(default value) "
        }
      },
      "additionalProperties": false
    },
    "TextOnPath": {
      "title": "Text On Path",
      "description": "Describes information about text on a path.",
      "type": "object",
      "$id": "#TextOnPath",
      "required": ["class"],
      "properties": {
        "class": {
          "const": "textOnPath"
        }
      },
      "additionalProperties": false
    },
    "FontAttr": {
      "title": "Text Attr",
      "description": "Text Attr defined for particular fragments of the text (text ranges).",
      "type": "object",
      "$id": "#FontAttr",
      "required": [
        "class",
        "length",
        "horizontalAlignment",
        "size",
        "kerning",
        "letterSpacing",
        "lineSpace",
        "underline",
        "linethrough",
        "lettertransform",
        "baselineShift",
        "baseline",
        "horizontalScale",
        "verticalScale",
        "proportionalSpacing",
        "rotate",
        "textParagraph"
      ],
      "properties": {
        "class": {
          "const": "fontAttr"
        },
        "length": {
          "type": "integer",
          "description": " The number of characters(utf-8) that the current attribute acts on. note: If a utf8 character is 4 bytes, its length counts as 2 If a utf8 character is 1 ~ 3 bytes, its length counts as 1 "
        },
        "borders": {
          "type": "array",
          "description": "An array containing the border styles of the character. Take precedence over the corresponding property of the object. If the entry is not exists, the corresponding property of the object itself is used.",
          "items": {
            "$ref": "#/definitions/Border"
          }
        },
        "fills": {
          "type": "array",
          "description": "An array containing the fill effects of the character.",
          "items": {
            "$ref": "#/definitions/Fill"
          }
        },
        "fillUseType": {
          "type": "integer",
          "enum": [0, 1],
          "enumDescriptions": [
            "fills take precedence over the corresponding property of the object, unless fills not exists.(default value)",
            "The corresponding property of the object take precedence over fills. When style.fills only has one valid solid color object and fills only has one valid solid color object, the opacity of the two solid color objects is added to the solid color object of style.fills."
          ]
        },
        "horizontalAlignment": {
          "type": "integer",
          "description": "Horizontal alignment of the text.",
          "enum": [0, 1, 2, 3, 4],
          "enumDescriptions": [
            "Left",
            "Right",
            "Centered",
            "Justified",
            "Natural"
          ]
        },
        "name": {
          "type": "string",
          "description": "Common name of font. The font name may contain subfamily, in which case the subFamilyName will not appear. If this item does not exist, the font name cannot be obtained."
        },
        "subFamilyName": {
          "type": "string",
          "description": "Font type (called 'subfamily' in OpenType specification)."
        },
        "size": {
          "type": "number",
          "description": "Font's size."
        },
        "kerning": {
          "type": "boolean",
          "description": "Describes if kerning feature is enabled in the text."
        },
        "letterSpacing": {
          "type": "number",
          "description": "Text letter spacing (can be negative)."
        },
        "lineSpace": {
          "type": "number",
          "description": "Describes the line spacing values of the text."
        },
        "underline": {
          "type": "integer",
          "description": "Text underline type.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["none", "single line", "double line"]
        },
        "linethrough": {
          "type": "boolean",
          "description": "Describes if the text has line through."
        },
        "bold": {
          "type": "boolean",
          "description": "Describes if the text is bold. If missing the information is not known."
        },
        "italic": {
          "type": "boolean",
          "description": "Describes if the text is italic. If missing the information is not known."
        },
        "lettertransform": {
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5],
          "enumDescriptions": [
            "do nothing.",
            "open smallcaps.",
            "open uppercase.",
            "open lowercase.",
            "force smallcaps.",
            "title"
          ]
        },
        "baselineShift": {
          "type": "number",
          "description": "Describes baselineShift value."
        },
        "baseline": {
          "type": "integer",
          "description": "Describes baseline's position type.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["normal", "superScript", "subScript"]
        },
        "horizontalScale": {
          "type": "number",
          "description": "Describes the horizontal scaling value of text.\nValue example:\n  1:    not scale\n  1.75: 175%\n  2:    200%\n  0.5:  50%\n"
        },
        "verticalScale": {
          "type": "number",
          "description": "Describes the vertical scaling value of text. Value example reference horizontalScale."
        },
        "proportionalSpacing": {
          "type": "number",
          "description": "Describes the proportional spacing of text.\nValue example:\n  1:    100%\n  0.5:  50%\n  0:    0%\n",
          "maximum": 1,
          "minimum": 0
        },
        "rotate": {
          "type": "number",
          "description": "Describes the value of text rotation(in degree).",
          "maximum": 180,
          "minimum": -180
        },
        "textParagraph": {
          "$ref": "#/definitions/TextParagraph"
        }
      },
      "additionalProperties": false
    },
    "TextParagraph": {
      "title": "Text Paragraph",
      "description": "Describes the paragraph properties of the text.",
      "type": "object",
      "$id": "#TextParagraph",
      "required": ["class", "paragraphSpacing"],
      "properties": {
        "class": {
          "const": "textParagraph"
        },
        "paragraphSpacing": {
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "LineType": {
      "title": "Line Type",
      "description": "Describes the list behavior of a row.",
      "type": "object",
      "$id": "#LineType",
      "required": ["class", "styleType", "level", "isFirst"],
      "properties": {
        "class": {
          "const": "lineType"
        },
        "styleType": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": ["plain", "ordered list", "unordered list"]
        },
        "level": {
          "type": "integer",
          "description": "Starting with 0(default value), the level of rows is described."
        },
        "isFirst": {
          "type": "boolean",
          "description": "Whether the current row is the first row in the hierarchy."
        }
      },
      "additionalProperties": false
    },
    "Image": {
      "title": "Image",
      "description": "Contains the information needed to draw the image.",
      "$id": "#Image",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "contextSettings",
        "frame",
        "id",
        "imageFileName",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "class": {
          "const": "image"
        },
        "imageFileName": {
          "type": "string",
          "description": "The relative path to the image file (utf-8)."
        },
        "fillReplacesImage": {
          "type": "boolean",
          "description": "If the value is true, only fill is used. Otherwise, the content of the image and the fill effect are used simultaneously. If missing, equivalent to false."
        },
        "imageAdjust": {
          "$ref": "#/definitions/ImageAdjust"
        }
      },
      "additionalProperties": false
    },
    "Group": {
      "title": "Group",
      "description": "A group is a combination of a series of objects.",
      "$id": "#Group",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "frame",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "Describes all child object information. The child item that appears later will be above the child item that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "const": "group"
        },
        "groupNestMaskType": {
          "type": "boolean",
          "description": " When the group itself is a mask and the group contains a mask, this value affects the valid area of the group as a mask. True: The mask region of the group is the result after the inner mask. False: A mask inside a group does not affect the region of the group's mask. (default value) If the object does not act as a mask, or does not have a mask child inside it, then this property is ignored. "
        }
      },
      "additionalProperties": false
    },
    "SymbolInstance": {
      "title": "Symbol Instance Layer",
      "description": "Symbol instance object represent an instance of a symbol source.",
      "type": "object",
      "$id": "#SymbolInstance",
      "required": [
        "alphaMaskBy",
        "bounds",
        "class",
        "contextSettings",
        "frame",
        "id",
        "isLocked",
        "maskType",
        "masterId",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "overrideValues",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "class": {
          "const": "symbolInstance"
        },
        "overrideValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OverrideValue"
          }
        },
        "masterId": {
          "type": "string",
          "description": "This field refers to the symbol master id."
        }
      },
      "additionalProperties": false
    },
    "OverrideValue": {
      "title": "Override Value",
      "description": "Defines an individual symbol override.",
      "type": "object",
      "$id": "#OverrideValue",
      "required": ["class", "objectId", "overrideName", "overrideValue"],
      "properties": {
        "class": {
          "const": "overrideValue"
        },
        "objectId": {
          "type": "string",
          "description": "Indicates which object's property is overridden."
        },
        "overrideName": {
          "type": "string",
          "description": " Starting with the top-level property of the object, use . as a separator. If the property is an array, it contains the index of the array, starting at 0, and * is valid for all items.\nFor example: style: override whole style style.fills: override the style.fills style.fills.0: override the first item of style.fills style.fills.0.color: override the color of the first style.fills style.fills.*.color: Override the color of all items in style.fills "
        },
        "overrideValue": {
          "description": "The value of the overridden attribute. The type depends on the concrete property."
        }
      },
      "additionalProperties": false
    },
    "SymbolMaster": {
      "title": "Symbol Master",
      "description": "A symbol source object represents a reusable group of objects.",
      "$id": "#SymbolMaster",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "frame",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "Describes all child object information. The child item that appears later will be above the child item that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "const": "symbolMaster"
        }
      },
      "additionalProperties": false
    },
    "PatternLayerDef": {
      "title": "Pattern Layer Def",
      "description": "Contains objects to define a global pattern.",
      "$id": "#PatternLayerDef",
      "type": "object",
      "required": [
        "alphaMaskBy",
        "bounds",
        "childObjects",
        "class",
        "contextSettings",
        "frame",
        "id",
        "isLocked",
        "maskType",
        "matrix",
        "outlineMaskBy",
        "overflow",
        "patternBoundingBox",
        "style",
        "styleEffectMaskArea",
        "visible"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Object identifier, unique."
        },
        "name": {
          "type": "string",
          "description": "Name of object (utf-8)."
        },
        "isLocked": {
          "type": "boolean",
          "description": "Describes whether the object is locked."
        },
        "visible": {
          "type": "boolean",
          "description": "Describes the visibility of the object."
        },
        "contextSettings": {
          "$ref": "#/definitions/GraphicsContextSettings",
          "description": "This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc."
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Object styles descriptor."
        },
        "bounds": {
          "$ref": "#/definitions/Rect",
          "description": "This property records the bounds information of the object before it is matrixed."
        },
        "frame": {
          "$ref": "#/definitions/Rect",
          "description": "An enclosing rectangle for the object. This property stores information about the object after the matrix transformation."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix, as defined in PostScript Language Reference Manual, Second Edition."
        },
        "alphaMaskBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlphaMask"
          }
        },
        "outlineMaskBy": {
          "type": "array",
          "description": "The result of the outline mask area is the intersection of multiple outline mask object results.",
          "items": {
            "type": "string",
            "description": "The value is ID of a object that is a outline mask of this object."
          }
        },
        "maskType": {
          "type": "integer",
          "description": "Describes the mask type of the object.",
          "enum": [0, 1, 2],
          "enumDescriptions": ["not mask", "outline mask", "alpha mask"]
        },
        "styleEffectMaskArea": {
          "type": "integer",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "The style and visible of the object not affects the area of the mask. The area of mask depends on bound.",
            "The style of the object not affects the area of the mask. The visible of the object affects the area of the mask.",
            "The style and visible of the object affects the area of the mask."
          ]
        },
        "maskShowType": {
          "type": "integer",
          "description": "Decide how the mask object should be displayed.",
          "enum": [0, 1, 2],
          "enumDescriptions": [
            "depends on the style. (default value for outline mask)",
            "only show bounds. (default value for alpha mask when it alphaType equal 0)",
            "not show. (default for other condition)"
          ]
        },
        "maskBoundsBorder": {
          "$ref": "#/definitions/Border",
          "description": " Used to draw the bounds of the mask. Only applies if the mask show type is 1. if omit, use r = g = b = 1 position = outside thickness = 1 opacity = 1 blend-mode = normal style = solid "
        },
        "overflow": {
          "description": "Sets what happens when a child element of a parent overflows its space.",
          "type": "integer",
          "enum": [1, 2, 3],
          "enumDescriptions": [
            "hidden: Anything outside the scope of the container will be cropped and invisible.",
            "visible: Contents outside the scope of the container will not be cropped and will be visible.",
            "scroll: Content that is out of scope of the container is cropped and a scroll bar is displayed to view the content that is out of scope."
          ]
        },
        "childObjects": {
          "type": "array",
          "description": "Describes all child object information. The child item that appears later will be above the child item that appears first.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Path"
              },
              {
                "$ref": "#/definitions/Image"
              },
              {
                "$ref": "#/definitions/Text"
              },
              {
                "$ref": "#/definitions/Group"
              },
              {
                "$ref": "#/definitions/Frame"
              },
              {
                "$ref": "#/definitions/SymbolInstance"
              },
              {
                "$ref": "#/definitions/SymbolMaster"
              }
            ]
          }
        },
        "class": {
          "const": "patternLayerDef"
        },
        "patternBoundingBox": {
          "type": "array",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        }
      },
      "additionalProperties": false
    }
  },
  "required": ["fileType", "frames"],
  "properties": {
    "fileType": {
      "type": "integer",
      "description": "Specifies the file type.",
      "enum": [1, 3, 4],
      "enumDescriptions": ["sketch", "figma", "adobe illustrator"]
    },
    "fileName": {
      "type": "string",
      "description": "Specifies the name to the input design file. The encoding format is utf-8."
    },
    "frames": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Frame"
      }
    },
    "patternLayerDef": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PatternLayerDef"
      }
    }
  },
  "additionalProperties": false
}
